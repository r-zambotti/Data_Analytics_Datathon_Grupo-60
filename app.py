# Importar bibliotecas
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
import pmdarima as pm
import requests

#from keras.models import Sequential
#from keras.layers import LSTM, Dense
from plotly.subplots import make_subplots
from prophet import Prophet
from prophet.plot import plot_plotly
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import acf, pacf, adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_absolute_error, mean_squared_error,accuracy_score
from sklearn.preprocessing import MinMaxScaler

from sklearn.model_selection import TimeSeriesSplit
from statsmodels.tsa.stattools import adfuller

from PIL import Image

import pickle

from utils import (normality_test, 
                   create_warning, 
                   create_quote, 
                   create_curiosity, 
                   create_insight, 
                   create_analysis, 
                   insert_image)

# layout
st.set_page_config(layout='centered', 
                   page_title='Associa√ß√£o Passos M√°gicos - Tech Challenge - FIAP', 
                   page_icon='üåü', initial_sidebar_state='auto')

#Dados
url = "https://github.com/wesleyesantos/Postech-Datathon/raw/main/PEDE_PASSOS_DATASET_FIAP.csv"
url1 = "https://github.com/4ca63473-734d-4d8c-8181-9635c1837ddc"
response = requests.get(url)
csv_data = response.content
response1 = requests.get(url1)
file_data = response1.content

# pagina√ß√£o
page_0 = 'Introdu√ß√£o ‚ú®'
page_1 = 'An√°lise Explorat√≥ria üé≤'
page_2 = 'Dashboard üìà'
page_3 = 'Conclus√£o'
page_4 = 'Refer√™ncias'

# menu lateral
st.sidebar.title('Menu')
page = st.sidebar.radio('Selecione a p√°gina:', 
                        [page_0, page_1, page_2, page_3, page_4])
     
# Introdu√ß√£o
if page == page_0:
    
    # t√≠tulo da p√°gina
    st.title('Impacto causado pela ONG Passos M√°gicos üí´')
    
    # descri√ß√£o
    st.markdown('''
                Analisando impacto causado pelas a√ß√µes volunt√°rias da ONG Passos M√°gicos, desenvolvendo uma an√°lise explorat√≥ria, gerando insight e dashboard interativos.<br> 
                <br>Desenvolvido para a <b>P√≥s-Tech Data Analytics ‚Äî FIAP</b>.
                ''', unsafe_allow_html=True)

    st.markdown('<br>', unsafe_allow_html=True)
    
    create_warning('Importante', 
                   '''
                        Este artigo tem fins exclusivamente educacionais.<br><br>
                        Para acessar os Dados do projeto, clicar na op√ß√£o abaixo "Nota T√©cnica". 
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)

    # expans√£o com nota t√©cnica
    with st.expander('üóíÔ∏è Nota T√©cnica'):
        st.markdown('''
        #### Dados do projeto

        **üöÄ Objetivo**: Analisar impacto causado pela ONG Passos M√°gicos.

        ---
        
        **üõ∏ Modelos**: os dados utilizados para an√°lise e treinamento no modelo foram coletados em 18/05/2024 e correspondem ao per√≠odo de 20/05/1987 a 13/05/2024.
        - [XGBoost](https://xgboost.readthedocs.io/en/stable/)
        - [Prophet](https://facebook.github.io/prophet/)

        ---
        
        **üì° Base de Dados e Dicion√°rio**:
        ''')

        tab9, tab10 = st.tabs(tabs=['Base de Dados', 'Dicion√°rio'])

        with tab9:
            st.markdown('''Base de dados PEDE (Pesquisa Extensiva do Desenvolvimento Educacional)''',unsafe_allow_html=True)
            
            st.download_button(label="Baixar Base PEDE (csv)",data=csv_data,file_name="PEDE_PASSOS_DATASET_FIAP.csv",mime="text/csv")

        with tab10:
            st.markdown('''###### <font color='blue'>Estrutura da Base''',unsafe_allow_html=True)
            st.download_button(label="Dicion√°rio da base PEDE",data=file_data,file_name="Dicion√°rio dados PEDE.pdf",mime="application/pdf")

            st.markdown('''###### <font color='blue'>Estrutura da Base''',unsafe_allow_html=True)
            data_dict = {
            "INSTITUICAO_ENSINO_ALUNO_2020": "Mostra institui√ß√£o de Ensino do Aluno em 2020",
            "NOME": "Nome do Aluno (dados est√£o anonimizados)",
            "IDADE_ALUNO_2020": "Idade do Aluno em 2020",
            "PEDRA_2020": "Classifica√ß√£o do Aluno baseado no n√∫mero do INDE (2020), o conceito de classifica√ß√£o √© dado por: Quartzo ‚Äì 2,405 a 5,506 / √Ågata ‚Äì 5,506 a 6,868 / Ametista ‚Äì 6,868 a 8,230 / Top√°zio ‚Äì 8,230 a 9,294",
            "IAA_2020": "Indicador de Auto Avalia√ß√£o ‚Äì M√©dia das Notas de Auto Avalia√ß√£o do Aluno em 2020",
            "IEG_2020": "Indicador de Engajamento ‚Äì M√©dia das Notas de Engajamento do Aluno em 2020",
            "IPS_2020": "Indicador Psicossocial ‚Äì M√©dia das Notas Psicossociais do Aluno em 2020",
            "IDA_2020": "Indicador de Aprendizagem - M√©dia das Notas do Indicador de Aprendizagem 2020",
            "IPP_2020": "Indicador Psicopedag√≥gico ‚Äì M√©dia das Notas Psicopedag√≥gicas do Aluno em 2020",
            "IPV_2020": "Indicador de Ponto de Virada ‚Äì M√©dia das Notas de Ponto de Virada do Aluno em 2020",
            "IAN_2020": "Indicador de Adequa√ß√£o ao N√≠vel ‚Äì M√©dia das Notas de Adequa√ß√£o do Aluno ao n√≠vel atual em 2020",
            "INDE_2020": "√çndice do Desenvolvimento Educacional ‚Äì M√©trica de Processo Avaliativo Geral do Aluno, dado pela pondera√ß√£o dos indicadores: IAN, IDA, IEG, IAA, IPS, IPP e IPV em 2020.",
            "DESTAQUE_IEG_2020": "Observa√ß√µes dos Avaliadores Sobre o Aluno referente ao 'Indicador de Engajamento' em 2020",
            "DESTAQUE_IDA_2020": "Observa√ß√µes dos Avaliadores Sobre o Aluno referente ao 'Indicador de Aprendizagem' em 2020",
            "DESTAQUE_IPV_2020": "Observa√ß√µes dos Avaliadores Sobre o Aluno referente ao 'Indicador de Ponto de Virada' em 2020",
            "PONTO_VIRADA_2020": "Campo do Tipo Booleano que sinaliza se o Aluno atingiu o 'Ponto de Virada' em 2020",
            "PEDRA_2021": "Classifica√ß√£o do Aluno baseado no n√∫mero do INDE (2021), o conceito de classifica√ß√£o √© dado por: Quartzo ‚Äì 2,405 a 5,506 / √Ågata ‚Äì 5,506 a 6,868 / Ametista ‚Äì 6,868 a 8,230 / Top√°zio ‚Äì 8,230 a 9,294",
            "IAA_2021": "Indicador de Auto Avalia√ß√£o ‚Äì M√©dia das Notas de Auto Avalia√ß√£o do Aluno em 2021",
            "IEG_2021": "Indicador de Engajamento ‚Äì M√©dia das Notas de Engajamento do Aluno em 2021",
            "IPS_2021": "Indicador Psicossocial ‚Äì M√©dia das Notas Psicossociais do Aluno em 2021",
            "IDA_2021": "Indicador de Aprendizagem - M√©dia das Notas do Indicador de Aprendizagem 2021",
            "IPP_2021": "Indicador Psicopedag√≥gico ‚Äì M√©dia das Notas Psicopedag√≥gicas do Aluno em 2021",
            "IPV_2021": "Indicador de Ponto de Virada ‚Äì M√©dia das Notas de Ponto de Virada do Aluno em 2021",
            "IAN_2021": "Indicador de Adequa√ß√£o ao N√≠vel ‚Äì M√©dia das Notas de Adequa√ß√£o do Aluno ao n√≠vel atual em 2021",
            "INDE_2021": "√çndice do Desenvolvimento Educacional ‚Äì M√©trica de Processo Avaliativo Geral do Aluno, dado pela pondera√ß√£o dos indicadores: IAN, IDA, IEG, IAA, IPS, IPP e IPV em 2021.",
            "REC_EQUIPE_1_2021": "Recomenda√ß√£o: da Equipe de Avali√ß√£o: 1 em 2021",
            "REC_EQUIPE_2_2021": "Recomenda√ß√£o: da Equipe de Avali√ß√£o: 2 em 2021",
            "REC_EQUIPE_3_2021": "Recomenda√ß√£o: da Equipe de Avali√ß√£o: 3 em 2021",
            "REC_EQUIPE_4_2021": "Recomenda√ß√£o: da Equipe de Avali√ß√£o: 4 em 2021",
            "REC_PSICO_2021": "Mostra qual a recomenda√ß√£o da equipe de psicologia sobre o Aluno em 2021",
            "PONTO_VIRADA_2021": "Campo do Tipo Booleano que sinaliza se o Aluno atingiu o 'Ponto de Virada' em 2021",
            "PEDRA_2022": "Classifica√ß√£o do Aluno baseado no n√∫mero do INDE (2022), o conceito de classifica√ß√£o √© dado por: Quartzo ‚Äì 2,405 a 5,506 / √Ågata ‚Äì 5,506 a 6,868 / Ametista ‚Äì 6,868 a 8,230 / Top√°zio ‚Äì 8,230 a 9,294",
            "IAA_2022": "Indicador de Auto Avalia√ß√£o ‚Äì M√©dia das Notas de Auto Avalia√ß√£o do Aluno em 2022",
            "IEG_2022": "Indicador de Engajamento ‚Äì M√©dia das Notas de Engajamento do Aluno em 2022",
            "IPS_2022": "Indicador Psicossocial ‚Äì M√©dia das Notas Psicossociais do Aluno em 2022",
            "IDA_2022": "Indicador de Aprendizagem - M√©dia das Notas do Indicador de Aprendizagem 2022",
            "IPP_2022": "Indicador Psicopedag√≥gico ‚Äì M√©dia das Notas Psicopedag√≥gicas do Aluno em 2022",
            "IPV_2022": "Indicador de Ponto de Virada ‚Äì M√©dia das Notas de Ponto de Virada do Aluno em 2022",
            "IAN_2022": "Indicador de Adequa√ß√£o ao N√≠vel ‚Äì M√©dia das Notas de Adequa√ß√£o do Aluno ao n√≠vel atual em 2022",
            "INDE_2022": "√çndice do Desenvolvimento Educacional ‚Äì M√©trica de Processo Avaliativo Geral do Aluno, dado pela pondera√ß√£o dos indicadores: IAN, IDA, IEG, IAA, IPS, IPP e IPV em 2022.",
            "REC_PSICO_2022": "Mostra qual a recomenda√ß√£o da equipe de psicologia sobre o Aluno em 2022",
            "REC_AVA_1_2022": "Recomenda√ß√£o da Equipe de Avali√ß√£o 1 em 2022",
            "REC_AVAL_2_2022": "Recomenda√ß√£o da Equipe de Avali√ß√£o: 2 em 2022",
            "REC_AVAL_3_2022": "Recomenda√ß√£o da Equipe de Avali√ß√£o: 3 em 2022",
            "REC_AVAL_4_2022": "Recomenda√ß√£o da Equipe de Avali√ß√£o: 4 em 2022",
            "DESTAQUE_IEG_2022": "Observa√ß√µes dos Mestres Sobre o Aluno referente ao 'Indicador de Engajamento' em 2022",
            "DESTAQUE_IDA_2022": "Observa√ß√µes dos Mestres Sobre o Aluno referente ao 'Indicador de Aprendizagem' em 2022",
            "DESTAQUE_IPV_2022": "Observa√ß√µes dos Mestres Sobre o Aluno referente ao 'Indicador de Ponto de Virada' em 2022",
            "PONTO_VIRADA_2022": "Campo do Tipo Booleano que sinaliza se o Aluno atingiu o 'Ponto de Virada' em 2022",
            "INDICADO_BOLSA_2022": "Campo do Tipo Booleano que sinaliza se o Aluno foi indicado para alguma Bolsa no Ano de 2022"
            }

            df = pd.DataFrame(list(data_dict.items()), columns=["Nome da Coluna", "Detalhamento dos dados"])

            st.markdown('''A base cont√©m 50 colunas referente ao per√≠odo de 2020 a 2022, com colunas adicionais no decorrer dos anos.''', unsafe_allow_html=True)

            st.table(df)    
            
        st.markdown('''        
        ---
        
        **üì° Fontes de dados**:
        - [IPEA](http://www.ipeadata.gov.br/Default.aspx)
        - [FRED](https://fred.stlouisfed.org/series/DCOILBRENTEU)
        - [Yahoo Finance](https://finance.yahoo.com/quote/CL=F?p=CL=F)

        ---
        
        **üßëüèª‚ÄçüöÄ Autores**: 
        - [Victor Novais de Oliveira](https://www.linkedin.com)
        - [Rodrigo Zambotti de Andrade](https://www.linkedin.com)
        - [Arencio Job Pereira](https://www.linkedin.com)  
        - [Bruno Akio Matsuzaki Shimada](https://www.linkedin.com)                     

        ---
        
        **ü™ê Reposit√≥rio**: 
        - [GitHub](https://github.com/r-zambotti/Data_Analytics_Datathon_Grupo-60.git)

        ---
        
        ''')
    
    st.markdown('---')
    
    # contexto para o objeto de estudo
    st.markdown('## Sobre a Associa√ß√£o Passos M√°gicos')
    
    st.markdown('''
                <p style="font-size: 18px">
                A Associa√ß√£o Passos M√°gicos tem uma trajet√≥ria de 30 anos de atua√ß√£o, trabalhando na transforma√ß√£o da vida de crian√ßas e jovens de baixa renda os levando a melhores oportunidades de vida.<br>

                A transforma√ß√£o, idealizada por Michelle Flues e Dimetri Ivanoff, come√ßou em 1992, atuando dentro de orfanatos, no munic√≠pio de Embu-Gua√ßu.
                Em 2016, depois de anos de atua√ß√£o, decidem ampliar o programa para que mais jovens tivessem acesso a essa f√≥rmula m√°gica para transforma√ß√£o.
                Passaram ent√£o a atuar como um projeto social e educacional, criando assim a Associa√ß√£o Passos M√°gicos.
                </p>
                ''', unsafe_allow_html=True)  
    
    create_quote('''
            "Investir em educa√ß√£o √© plantar as sementes de um futuro promissor para cada crian√ßa".<br>
            ''','- Associa√ß√£o Passos M√°gicos')

    # contexto miss√£o, programas e impactos - menu de tabelas
    tab1, tab2, tab3 = st.tabs(
    tabs=["Miss√£o e Vis√£o", "Programas e Atividades", "Impacto e Resultados"])

    with tab1:
        st.markdown('''
                    <p style="font-size: 18px">
                    üéØ<b> Miss√£o:</b> A miss√£o da Passos M√°gicos √© transformar a vida de jovens e crian√ßas, fornecendo ferramentas que os levem a melhores oportunidades de vida. <br><br>
                    üëÅ <b> Vis√£o:</b> A vis√£o da organiza√ß√£o √© viver em um Brasil onde todas as crian√ßas e jovens tenham iguais oportunidades para realizar seus sonhos e se tornem agentes transformadores de suas pr√≥prias vidas.
                    </p>
                    ''', unsafe_allow_html=True)

    with tab2:
        st.markdown(''' 
                    <p style="font-size: 18px">
                    A Passos M√°gicos oferece uma variedade de programas educacionais e de apoio, incluindo:
                    </p>
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Educa√ß√£o de qualidade:</b> Acesso a ensino de alta qualidade para crian√ßas e jovens;            
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Assist√™ncia psicol√≥gica e psicopedag√≥gica:</b> Suporte emocional e educacional para ajudar no desenvolvimento integral dos alunos;
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Amplia√ß√£o da vis√£o de mundo: </b>Projetos de interc√¢mbio e apadrinhamento que visam integrar os alunos a diferentes culturas e ambientes;
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Campanhas de arrecada√ß√£o:</b> Anualmente, s√£o promovidas campanhas para arrecadar fundos e presentes para as crian√ßas e adolescentes atendidos pela institui√ß√£o.
                    ''', unsafe_allow_html=True)

    with tab3:
        st.markdown('''
                    <p style="font-size: 18px">
                    Desde sua funda√ß√£o, a Passos M√°gicos tem expandido significativamente seu alcance e impacto. 
                    Em 2016, a organiza√ß√£o formalizou-se como um projeto social e educacional, ampliando suas atividades para beneficiar mais jovens. Atualmente, 
                    a institui√ß√£o atende centenas de crian√ßas e adolescentes, oferecendo bolsas de estudo, suporte psicol√≥gico e oportunidades de interc√¢mbio.
                    </p>
                    ''', unsafe_allow_html=True)
        
    st.markdown('---')

    # Inserindo imagem da ONG Passos M√°gicos

    image =  Image.open("img/passos_magicos.png")
    st.image(image, caption= "Imagem oficial da ONG Passos M√°gicos")
    
# An√°lise Explorat√≥ria
elif page == page_1:

    st.title('An√°lise Explorat√≥ria üîé')
    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('''
                A an√°lise Explorat√≥ria do projeto foi realizada com a base <b><font color='blue'>PEDE (Pesquisa Extensiva do Desenvolvimento Educacional)</b></font> da Passos M√°gicos e foi disponibilizada toda documenta√ß√£o 
                explicando como foram criadas cada √≠ndice e m√©tricas j√° existentes. A PASSOS M√ÅGICOS utiliza uma m√©trica chamada <b><font color='blue'>INDE (√çndice Nacional de Desenvolvimento Educacional)</b></font> para avaliar 
                os alunos essa m√©trica √© composta por alguns indicadores que s√£o separados em 3 dimens√µes principais onde avaliam v√°rios crit√©rios como adequa√ß√£o de n√≠vel, desempenho acad√™mico, engajamento, autoavalia√ß√£o, aspectos 
                psicossociais e psicopedag√≥gicos, essas dimens√µes est√£o divididas conforme abaixo e cada uma delas trazem os seguintes indicadores:
                ''', unsafe_allow_html=True)
    
    st.markdown('''
                - Dimens√£o acad√™mica: Com os indicadores IEG, IDA e IAN
                ''',  unsafe_allow_html=True)
    
    st.markdown('''
                - Dimens√£o psicossocial: Com os indicadores IAA e IPS
                ''',  unsafe_allow_html=True)
    
    st.markdown('''
                - Dimens√£o psicopedag√≥gica: Com os indicadores IPP e IPV
                ''',  unsafe_allow_html=True)

    st.markdown('''
                Quanto ao <b><font color='blue'>INDE </b></font> geral tem uma m√©dia de 7,07, obtendo uma varia√ß√£o bem grande entre o m√≠nimo de 2,46 e m√°ximo de 9,71; 
                ao realizar a an√°lise por ano podemos observar que tem um aumento na quantidade de alunos e os n√≠veis do INDE caem, nos trazendo o desafio de come√ßar a segregar essa informa√ß√£o para buscar o gap.
                ''', unsafe_allow_html=True) 

    st.markdown('''
                O indicador <b><font color='blue'>IDA</b></font> se sobresai como o mais baixo de todos os anos que √© um indicador de participa√ß√£o dos projetos e atividades pedag√≥gicas, 
                e devido a esse defasamento o maior indicador que temos √© o <b><font color='blue'>IAA</b></font> que √© o indice de aten√ß√£o psicol√≥gica e psicopedag√≥gica aos alunos.
                ''', unsafe_allow_html=True)

    #An√°lise dos Indicadores
    st.subheader('An√°lise dos Indicadores', divider='orange')

    #Divindo cada indicador em selectbox para melhor visualiza√ß√£o
    indicador = st.selectbox('Selecione o indicador:', ['INDE','Pedras','IEG', 'IDA', 'IAN', 'IAA', 'IPS', 'IPP', 'IPV', 'Ponto de Virada'])

    #Tabela INDE
    if indicador == 'INDE':
        
        st.markdown('''
                    <p style="font-size: 18px">
                    O <b><font color='blue'>√çndice de Desenvolvimento Educacional (INDE)</b></font> da Associa√ß√£o Passos M√°gicos √© uma m√©trica utilizada para avaliar o progresso educacional dos alunos atendidos pela institui√ß√£o. 
                    Esse √≠ndice √© calculado com base em diversos fatores, incluindo:
                    </p>
                    ''', unsafe_allow_html=True)    
        
        st.markdown('''
                    - <b><font color='blue'>Desempenho Acad√™mico:</b></font> Avalia√ß√£o das notas dos alunos em disciplinas como Portugu√™s, Matem√°tica e Ingl√™s.
                    ''', unsafe_allow_html=True)
        
        st.markdown('''
                    - <b><font color='blue'>Apoio Psicol√≥gico e Psicopedag√≥gico:</b></font> Impacto das interven√ß√µes psicol√≥gicas e psicopedag√≥gicas no desenvolvimento dos alunos.
                    ''', unsafe_allow_html=True)
        
        st.markdown('''
                    - <b><font color='blue'>Participa√ß√£o em Atividades Extracurriculares:</b></font> Envolvimento dos alunos em atividades que ampliam sua vis√£o de mundo, como interc√¢mbios e projetos culturais.
                    ''', unsafe_allow_html=True)
        
        st.markdown('''
                    - <b><font color='blue'>Evolu√ß√£o ao Longo do Ano:</b></font> Compara√ß√£o das notas e do desenvolvimento dos alunos entre o in√≠cio e o final do ano letivo.
                    ''', unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">
                    O INDE √© uma ferramenta crucial para a Passos M√°gicos, pois permite monitorar e ajustar suas estrat√©gias educacionais, garantindo que cada aluno receba o suporte necess√°rio para alcan√ßar seu pleno potencial.
                    </p>
                    ''', unsafe_allow_html=True)

    #Tabela Pedras
    if indicador == 'Pedras':

        st.markdown('''
                    As <b><font color='blue'>Pedras</b></font> podem ser definidas como o quanto os alunos est√£o pontuando, ent√£o ele entra num esquema de classifica√ß√£o, 
                    o que traz mais clareza na an√°lise e aten√ß√£o para o desenvolvimento de cada aluno e tamb√©m d√° uma vis√£o mais competitiva aos alunos, por√©m eles ir√£o almejar as melhores classifica√ß√µes. 
                    At√© o √∫ltimo relat√≥rio PEDE tinhamos 4 pedras que s√£o:
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    - <b><font color='blue'>Quartzo:</b></font> Alunos com INDE entre <b><font color='blue'>2,405 a 5,506</b></font>.
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    - <b><font color='blue'>√Ågata:</b></font> Alunos com INDE entre <b><font color='blue'>5,506 a 6,868</b></font>.
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    - <b><font color='blue'>Ametista:</b></font> Alunos com INDE entre <b><font color='blue'>6,868 a 8,230</b></font>.
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    - <b><font color='blue'>Top√°zio:</b></font> Alunos com INDE entre <b><font color='blue'>8,230 a 9,294</b></font>.
                    ''',unsafe_allow_html=True)
        
    #Tabela IEG    
    if indicador == 'IEG':

        st.markdown('''
                    ###### <font color='blue'>IEG (√çndice de Engajamento Global)
                    ''',unsafe_allow_html=True )
        
        st.markdown('''
                    Avalia o n√≠vel de envolvimento dos alunos em atividades extracurriculares e programas de interc√¢mbio. Este √≠ndice √© importante para entender como as experi√™ncias 
                    fora da sala de aula contribuem para o desenvolvimento pessoal e acad√™mico dos alunos.
                    ''')

    #Tabela IDA
    if indicador == 'IDA':

        st.markdown('''
                    ###### <font color='blue'>IDA (√çndice de Desenvolvimento Acad√™mico)
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    Mede o progresso acad√™mico dos alunos, considerando notas, frequ√™ncia escolar e participa√ß√£o em atividades educacionais. 
                    Este √≠ndice ajuda a identificar √°reas que necessitam de melhorias e a efic√°cia das interven√ß√µes pedag√≥gicas.
                    ''')

    #Tabela IAN
    if indicador == 'IAN':

        st.markdown('''
                    ######  <font color='blue'>IAN (√çndice de Aproveitamento Nutricional)
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    Avalia a qualidade da alimenta√ß√£o fornecida √†s crian√ßas e jovens, medindo o impacto da nutri√ß√£o no desempenho escolar e no bem-estar geral dos alunos.
                    ''')
        
    #Tabela IAA
    if indicador == 'IAA':

        st.markdown('''
                    ######  <font color='blue'>IAA (√çndice de Atendimento e Acompanhamento)
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    Mede a qualidade e a frequ√™ncia do atendimento psicol√≥gico e psicopedag√≥gico oferecido aos alunos. 
                    Este √≠ndice √© crucial para garantir que os alunos recebam o suporte necess√°rio para superar desafios emocionais e acad√™micos.
                    ''')
        
    #Tabela IPS
    if indicador == 'IPS':

        st.markdown('''
                    ######  <font color='blue'>IPS (√çndice de Participa√ß√£o Social)
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    Avalia o envolvimento dos alunos em atividades comunit√°rias e projetos sociais. Este √≠ndice ajuda a medir o impacto dos programas da Passos M√°gicos na forma√ß√£o de cidad√£os conscientes e ativos na sociedade.
                    ''')
        
    #Tabela IPP
    if indicador == 'IPP':

        st.markdown('''
                    ###### <font color='blue'>IPP (√çndice de Progresso Pessoal)
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    Mede o desenvolvimento pessoal dos alunos, considerando aspectos como autoestima, habilidades sociais e resili√™ncia. 
                    Este √≠ndice √© importante para avaliar o impacto das interven√ß√µes da Passos M√°gicos no crescimento pessoal dos alunos.
                    ''')
        
    #Tabela IPV
    if indicador == 'IPV':

        st.markdown('''
                    ###### <font color='blue'>IPV (√çndice de Perman√™ncia e Valoriza√ß√£o)
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    Avalia a taxa de reten√ß√£o dos alunos nos programas da Passos M√°gicos e a valoriza√ß√£o dos mesmos pelos benefici√°rios e suas fam√≠lias. 
                    Este √≠ndice √© fundamental para entender a satisfa√ß√£o e o comprometimento dos alunos com os programas oferecidos.
                    ''')
        
    #Tabela Ponto de Virada   
    if indicador == 'Ponto de Virada':
        
        st.markdown(''' 
                    O Ponto de virada indica que o aluno atingiu um passo m√°gico, √© a conquista de uma habilidade fundamental, 
                    √© medido atrav√©s das notas, avalia√ß√µes e outros dados, e demonstra que o aluno teve um grande progresso, 
                    essa evolu√ß√£o o ajudar√° a enfrentar v√°rios desafios que encontrar√° pela frente, assim como:
                    ''' )
        
        st.markdown('''
                    - Os alunos poder√£o superar dificuldades em mat√©rias espec√≠ficas e melhorar seu desempenho acad√™mico,
                    - Isso pode incluir avan√ßos em leitura, matem√°tica, ci√™ncias e outras √°reas,
                    - O ponto de virada traz consigo uma sensa√ß√£o de realiza√ß√£o e confian√ßa,
                    - Os alunos se sentir√£o mais capazes e confiantes em suas habilidades,
                    - Eles desenvolver√£o habilidades de comunica√ß√£o, resolu√ß√£o de conflitos, empatia e trabalho em equipe,
                    - Isso os ajudar√° a lidar com situa√ß√µes sociais e emocionais,
                    - O ponto de virada tamb√©m envolve uma amplia√ß√£o da vis√£o de mundo,
                    - Os alunos estar√£o mais abertos a diferentes culturas, perspectivas e oportunidades,
                    - Os alunos ser√£o incentivados a assumir o protagonismo em suas vidas,
                    - Eles tomar√£o decis√µes mais conscientes e ter√£o maior autonomia,
                    - O ponto de virada ensina a import√¢ncia da persist√™ncia e da resili√™ncia,
                    - Os alunos saber√£o que podem superar obst√°culos com esfor√ßo cont√≠nuo.
                    ''')

    # carregar dados
    # data = pd.read_parquet(r'data/data_w_indicators.parquet')
    # # sidebar - adicionar filtros
    # st.sidebar.title('‚öôÔ∏è Filtros')
    # # filtros de ano com slider
    # min_year = data.index.year.min()
    # min_year = int(min_year)
    # max_year = data.index.year.max()
    # max_year = int(max_year)
    # # filtro de pre√ßo com slider
    # min_price = data['brent'].min()
    # min_price = int(min_price)
    # max_price = data['brent'].max()
    # max_price = int(max_price)

# Dashboard
elif page == page_2:
    # t√≠tulo
    st.title('Modelos de Previs√£o')
#     # sele√ß√£o de modelo
#     model = st.selectbox('Selecione o modelo:', ['XGBoost', 'Prophet'])
    
#     st.markdown('<br>', unsafe_allow_html=True)
    
#     if model == 'XGBoost':
#         # texto
#         st.markdown('''
#                     <p style="font-size: 18px">
#                         O XGBoost, ou <i>Extreme Gradient Boosting</i>, √© um algoritmo de aprendizado de m√°quina supervisionado e baseado em √°rvores de decis√£o.
#                         O modelo √© uma implementa√ß√£o otimizada do Gradient Boosting e pode ser utilizado para problemas de regress√£o e classifica√ß√£o. O XGBoost √© 
#                         amplamente utilizado em competi√ß√µes de ci√™ncia de dados e √© conhecido por sua efici√™ncia e desempenho.
#                         <br>
#                     </p>
#                     ''', unsafe_allow_html=True)
        
#         with st.expander('üêç Exibir c√≥digo Python'):
#             # c√≥digo
#             st.code('''
#                     # importar o XGBoost
#                     !pip install xgboost                 # instalar biblioteca
#                     import xgboost as xgb                # importar biblioteca
#                     ''')
        
#         # markdown
#         st.markdown('''
#                     <p style="font-size: 18px">
#                         <br>
#                         As colunas categ√≥ricas devem ser transformadas em vari√°veis num√©ricas antes de treinar o modelo.
#                         Para isso, podemos utilizar a t√©cnica <i>One-Hot Encoding</i>.<br>
#                     </p>
#                     ''', unsafe_allow_html=True)
        
#         # c√≥digo
#         with st.expander('üêç Exibir c√≥digo Python'):
#             st.code('''
#                         # One-Hot Encoding
#                         df = pd.get_dummies(df_baseline, 
#                                 columns=['month', 'year', 'weekday'],
#                                 drop_first=True)
                        
#                         # caracteres min√∫sculos
#                         df.columns = df.columns.str.lower()
                        
#                         print(f'Quantidade de colunas: {df.shape[1]}')
#                         ''')
        
#         # divider
#         st.markdown('---')
        
#         # selecione o modelo
#         model_type = st.radio('Selecione o modelo:', ['Baseline', 'Final'])
#         if model_type == 'Baseline':
#             # texto
#             # prepara√ß√£o dos dados - t√≠tulo
#             st.markdown('''#### Prepara√ß√£o dos dados''')
#             st.markdown(r'''
#                         <p style="font-size: 18px">
#                         Para o modelo baseline, utilizamos 80% dos dados para treino e 20% para teste.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # baseline - divis√£o dos dados
#                         X = df_baseline.drop(columns=['brent'])
#                         y = df_baseline['brent']

#                         # train test split
#                         train_baseline_size = int(df_baseline.shape[0] * 0.8)

#                         # 80% treino, 20% teste
#                         X_train_baseline, X_test_baseline = X[:train_baseline_size], X[train_baseline_size:]
#                         y_train_baseline, y_test_baseline = y[:train_baseline_size], y[train_baseline_size:]
#                         ''')
                
#             # gr√°fico com divis√£o dos dados
#             baseline_xgb_df = pd.read_parquet(r'data/xgboost_baseline_train_test.parquet')
#             fig = px.line(baseline_xgb_df, x='date', y='brent', 
#                 title='XGBoost Baseline - Treino e Teste', 
#                 color='set', 
#                 color_discrete_map={'train': '#4089FF', 
#                                     'test': '#f6c409'},
#                 template='plotly_dark')
#             # adicionar linha para divis√£o
#             train_baseline_size = int(baseline_xgb_df.shape[0] * 0.8)
#             fig.add_shape(type='line', 
#                         x0=baseline_xgb_df.iloc[train_baseline_size]['date'],
#                         y0=0, x1=baseline_xgb_df.iloc[train_baseline_size]['date'],
#                         y1=baseline_xgb_df['brent'].max()*1.1,
#                         line=dict(color='white', width=1, dash='dash'))
                            
#             fig.update_layout(title_font_size=20)
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             st.plotly_chart(fig, use_container_width=True)
                
#             st.markdown('''#### Treinamento do modelo''')
#             # selecionar modelo baseline ou final - colocar isso para cima e mudar o c√≥digo
#             # texto
#             st.markdown('''<p style="font-size: 18px">
#                         Com os dados preparados, podemos treinar o modelo XGBoost. 
#                         Como vamos prever valores de pre√ßo, utilizamos a classe XGBRegressor. 
#                         Para o treinamento do modelo baseline, n√£o utilizamos
#                         colunas de indicadores t√©cnicos, como EMA, MACD e RSI.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # Constru√ß√£o do modelo baseline
#                         xgb_baseline = xgb.XGBRegressor(n_estimators=1000,                 # n√∫mero de √°rvores
#                                                         max_depth=3,                       # profundidade m√°xima = 3 n√≠veis
#                                                         booster='gbtree',                  # default
#                                                         early_stopping_rounds=50,          # cessa ap√≥s 50 itera√ß√µes sem melhorar
#                                                         objective='reg:squarederror' ,     # fun√ß√£o objetivo = erro quadr√°tico
#                                                         learning_rate=0.01,               # taxa de aprendizado menor, para evitar o overfitting
#                                                         random_state=19)                   # para reprodu√ß√£o

#                         # Treinamento do modelo baseline
#                         xgb_baseline.fit(X_train_baseline, y_train_baseline,
#                                         eval_set=[(X_train_baseline, y_train_baseline),    # avalia√ß√£o no treino
#                                                     (X_test_baseline, y_test_baseline)],   # avalia√ß√£o no teste
#                                                     verbose=True)                          # exibir resultados durante o treino
#                         ''')
                
#             st.markdown('''<br>''', unsafe_allow_html=True)
                
#             # import√¢ncia das features
#             importance_baseline_df = pd.read_parquet(r'data/xgboost_baseline_importance.parquet')
            
#             # texto
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Exxon Mobil, o √≠ndice SP500 e o ano de 2012 s√£o as features mais importantes no modelo baseline.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # code
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # Import√¢ncia das features
#                         importance_baseline_df = pd.DataFrame({'feature': X_train_baseline.columns,
#                                                                 'importance': xgb_baseline.feature_importances_})
                        
#                         # Ordenar
#                         importance_baseline_df = importance_baseline_df.sort_values('importance', ascending=False)
#                         ''')
            
#             st.markdown('''<br>''', unsafe_allow_html=True)
            
#             # plot
#             fig = px.bar(importance_baseline_df, x='importance', y='feature',
#                         title='10 Features mais importantes',
#                         labels={'importance': 'Import√¢ncia', 'feature': 'Feature'},
#                         template='plotly_dark')
#             fig.update_layout(title_font_size=20)
#             fig.update_xaxes(title=None, showgrid=True,
#                              range=[0, importance_baseline_df['importance'].max() * 1.2])
#             fig.update_yaxes(title=None)
#             st.plotly_chart(fig, use_container_width=True)
            
#             # realizar previs√µes
#             st.markdown('''#### Previs√µes''')
#             # texto
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Com o modelo treinado, podemos realizar previs√µes para o pre√ßo do petr√≥leo Brent.
#                         </p>
#                         ''', unsafe_allow_html=True)
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # previs√µes
#                         y_pred_baseline = xgb_baseline.predict(X_test_baseline)
                        
#                         # dataframe com previs√µes
#                         predictions_baseline_df = pd.DataFrame({'date': X_test_baseline.index,
#                                                                 'brent': y_test_baseline,
#                                                                 'brent_pred': y_pred_baseline})
                        
#                         ''')
#             # plotar previs√µes
#             baseline_xgb_pred_df = pd.read_parquet(r'data/xgboost_baseline_prediction.parquet')
            
#             fig = px.line(baseline_xgb_pred_df, x='date', y=['brent', 'prediction'],
#                 title='XGBoost Baseline - Predi√ß√£o vs Real', 
#                 color_discrete_map={'brent': '#4089FF', 
#                                     'prediction': '#e34592'},
#                 labels={'variable': 'vari√°vel', 'value': 'pre√ßo (U$D )'},
#                 template='plotly_dark')
#             fig.update_layout(title_font_size=20)
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             st.plotly_chart(fig, use_container_width=True)
        
#             # m√©tricas
#             st.markdown('''#### Avalia√ß√£o do modelo''')
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Para avaliar o modelo, utilizamos as m√©tricas RMSE, MAE e MAPE.<br>
#                         </p>
#                         ''', unsafe_allow_html=True)  
#             # RMSE  
#             st.markdown('''
#                         - **RMSE** - *Root Mean Squared Error*, ou Raiz do Erro Quadr√°tico M√©dio:
#                         ''')
#             st.latex(r'''
#                     RMSE = \sqrt{\frac{1}{n} \sum_{i=1}^{n} (y_{true} - y_{pred})^2}
#                     ''')
#             # MAE
#             st.markdown('''
#                         - **MAE** - *Mean Absolute Error*, ou Erro M√©dio Absoluto:
#                         ''')
#             st.latex(r'''
#                     MAE = \frac{1}{n} \sum_{i=1}^{n} |y_{true} - y_{pred}|
#                     ''')
#             # MAPE
#             st.markdown('''
#                         - **MAPE** - *Mean Absolute Percentage Error*, ou Erro Percentual Absoluto M√©dio:
#                         ''')
#             st.latex(r'''
#                     MAPE = \frac{1}{n} \sum_{i=1}^{n} \left| \frac{y_{true} - y_{pred}}{y_{true}} \right| \times 100
#                     ''')
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # importar m√©tricas
#                         from sklearn.metrics import mean_absolute_error, mean_squared_error
                        
#                         # fun√ß√£o para calcular MAPE
#                         def mean_absolute_percentage_error(y_true, y_pred) -> float:
#                             return np.mean(np.abs((y_true - y_pred) / y_true)) * 100
                        
#                         # m√©tricas
#                         rmse_baseline = np.sqrt(mean_squared_error(y_test_baseline, y_pred_baseline))
#                         mae_baseline = mean_absolute_error(y_test_baseline, y_pred_baseline)
#                         mape_baseline = mean_absolute_percentage_error(y_test_baseline, y_pred_baseline)
                        
#                         # print
#                         print(f'RMSE: {rmse_baseline:.2f}')
#                         print(f'MAE: {mae_baseline:.2f}')
#                         print(f'MAPE: {mape_baseline:.2f}')
#                         ''')
            
#             st.markdown('<br>', unsafe_allow_html=True)
            
#             # bot√£o para exibir scores
#             if st.button('üìä Exibir Scores'):
#                 scores_baseline_df = pd.read_parquet(r'data/xgboost_baseline_scores.parquet')
#                 scores_baseline_df = scores_baseline_df.T
#                 scores_baseline_df.columns = scores_baseline_df.iloc[0]
#                 # drop first row
#                 scores_baseline_df = scores_baseline_df[1:]
#                 # mostrar dataframe
#                 st.dataframe(scores_baseline_df)
            
#             st.markdown('<br>', unsafe_allow_html=True)
            
#             baseline_metrics_text = r'''
#                         A RMSE √© dada na mesma unidade de medida do dataset original e mostra que o modelo baseline est√° errando, em m√©dia, U$D 23.52.<br>
#                         A MAE √© uma m√©trica absoluta e indica que as previs√µes do modelo est√£o desviando, em m√©dia, U$D 17.1 do valor real.<br>
#                         A diferen√ßa entre RMSE e MAE √© que a primeira d√° mais peso para erros maiores, 
#                         enquanto a segunda trata todos os erros de forma igual.<br>
#                         A MAPE √© uma porcentagem e indica que as previs√µes do modelo est√£o desviando, em m√©dia, 22.96% do valor real.
#                         '''
#             create_analysis('Resultados do Modelo Baseline', baseline_metrics_text)
            
#             st.markdown('<br>', unsafe_allow_html=True)

                
#         else:
#             # prepara√ß√£o dos dados - t√≠tulo
#             st.markdown('''#### Prepara√ß√£o dos dados''')
#             # texto
#             st.markdown(r'''
#                         <p style="font-size: 18px">
#                         Para a divis√£o dos dados em treino e teste, a classe TimeSeriesSplit do Scikit-Learn se utiliza do 
#                         m√©todo de valida√ß√£o cruzada (ou cross validation), que segmenta os dados de treino em K grupos 
#                         (chamados <i>folds</i>), consecutivos e ordenados. Em seguida, treina o modelo em etapas, a partir 
#                         de um pequeno conjunto inicial, que se expande com mais dados de treino - em dire√ß√£o ao futuro. 
#                         Se K √© igual a 5, por exemplo, o modelo √© treinado 5 vezes, com volume incremental de dados, onde  
#                         cada nova dobra incorpora os dados da dobra anterior e expande o conjunto de treino. 
#                         Ap√≥s cada treinamento, o modelo executa previs√µes, a serem avaliadas pela m√©trica escolhida pelo usu√°rio.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # modelo final - divis√£o dos dados
#                         X = df.drop(columns=['brent'])
#                         y = df['brent']
                        
#                         # time series split
#                         tscv = TimeSeriesSplit(n_splits=5)
                        
#                         # iterar sobre as divis√µes
#                         for train_index, test_index in tscv.split(X):
#                             X_train, X_test = X.iloc[train_index], X.iloc[test_index]
#                             y_train, y_test = y.iloc[train_index], y.iloc[test_index]
#                         ''')
                
#             # gr√°fico com divis√£o dos dados
#             df = pd.read_parquet(r'data/data_w_indicators.parquet')
#             X = df.drop(columns=['brent'])
#             y = df['brent']
#             # time series split
#             tscv = TimeSeriesSplit(n_splits=5)
#             # iterar sobre as divis√µes
#             i = 1
#             for train_index, test_index in tscv.split(X):
#                 X_train, X_test = X.iloc[train_index], X.iloc[test_index]
#                 y_train, y_test = y.iloc[train_index], y.iloc[test_index]
#                 # dataframe com divis√µes
#                 df_split = df.iloc[test_index]
#                 df_split['set'] = f'set_{i}'
#                 if i == 1:
#                     df_final = df_split
#                 else:
#                     df_final = pd.concat([df_final, df_split])
#                 i += 1
#             # plotar gr√°fico
#             fig = px.line(df_final, x=df_final.index, y='brent',
#                         title='XGBoost Final - Divis√£o dos Dados',
#                         color='set', 
#                         template='plotly_dark')
#             fig.update_layout(title_font_size=20)
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             st.plotly_chart(fig, use_container_width=True)
            
#             st.markdown('''#### Treinamento do modelo''')
#             # texto
#             st.markdown('''<p style="font-size: 18px">
#                         A melhor escolha pode ser encontrada atrav√©s da t√©cnica Grid Search, 
#                         que itera sobre as op√ß√µes listadas pelo usu√°rio e treina modelos √∫nicos, 
#                         gerados a partir da combina√ß√£o de todos os par√¢metros. 
#                         Vale ressaltar que, quanto mais op√ß√µes s√£o fornecidas, mais tempo ser√° consumido na execu√ß√£o.
#                         ''', unsafe_allow_html=True)
            
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # Importar Grid Search
#                         from sklearn.model_selection import GridSearchCV
                                                
#                         # Converter X e y para numpy arrays
#                         X = np.array(X)
#                         y = np.array(y)
                        
#                         # Grid Search
#                         params = {'n_estimators': [100, 500, 1000, 2000],
#                                   'max_depth': [3, 5, 7, 9],
#                                   'learning_rate': [0.001, 0.01, 0.1]
                        
#                         xgb_final = xgb.XGBRegressor(objective='reg:squarederror', 
#                                                      random_state=19)
                        
#                         grid_search = GridSearchCV(estimator=xgb_final, 
#                                                 param_grid=params, 
#                                                 scoring='neg_mean_squared_error', 
#                                                 cv=tscv, 
#                                                 verbose=1)
                        
#                         grid_search.fit(X, y)
                        
#                         # Melhores par√¢metros
#                         best_params = grid_search.best_params_
#                         # Melhor modelo
#                         best_model = grid_search.best_estimator_
#                         # Melhor score
#                         best_score = grid_search.best_score_
                        
#                         # Criar dataframe com resultados
#                         results_df = pd.DataFrame(grid_search.cv_results_)
#                         results_df = results_df.sort_values(by='rank_test_score')
#                         ''')
#             # plotar import√¢ncia das features
#             # import√¢ncia das features
#             importance_final_df = pd.read_parquet(r'data/xgboost_best_importance.parquet')
#             # plot
#             fig = px.bar(importance_final_df, x='importance', y='feature',
#                         title='10 Features mais importantes',
#                         labels={'importance': 'Import√¢ncia', 'feature': 'Feature'},
#                         template='plotly_dark')
#             fig.update_layout(title_font_size=20)
#             fig.update_xaxes(title=None, showgrid=True,
#                              range=[0, importance_final_df['importance'].max() * 1.2])
#             fig.update_yaxes(title=None)
#             st.plotly_chart(fig, use_container_width=True)
            
#             # texto
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Os anos de 2012, 2011 e 2013 s√£o as features mais importantes para o modelo final.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # resultados
#             st.markdown('''<br>''', unsafe_allow_html=True)
#             st.markdown('''#### Avalia√ß√£o do modelo''')
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Com isso, treinamos 48 modelos e o melhor foi obtido com os par√¢metros:<br>
#                         - <b>n_estimators</b>: 1000<br>
#                         - <b>max_depth</b>: 3<br>
#                         - <b>learning_rate</b>: 0.1<br>
#                         </p>
#                         ''', unsafe_allow_html=True)
#             # previs√µes
#             st.markdown('''#### Previs√µes''')
#             # texto
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Com o modelo treinado, realizamos previs√µes para o pre√ßo do petr√≥leo Brent.
#                         </p>
#                         ''', unsafe_allow_html=True)
#             # plotar
#             final_xgb_pred_df = pd.read_parquet(r'data/xgboost_best_prediction.parquet')
#             fig = px.line(final_xgb_pred_df, x='date', y=['brent', 'prediction'],
#                 title='XGBoost Final - Predi√ß√£o vs Real', 
#                 color_discrete_map={'brent': '#4089FF', 
#                                     'prediction': '#e34592'},
#                 labels={'variable': 'vari√°vel', 'value': 'pre√ßo (U$D )'},
#                 template='plotly_dark')
#             fig.update_layout(title_font_size=20)
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             st.plotly_chart(fig, use_container_width=True)
            
#             # m√©tricas
#             st.markdown('''#### Avalia√ß√£o do modelo''')
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Para avaliar o modelo, utilizamos as m√©tricas:<br>
#                         </p>
#                         ''', unsafe_allow_html=True)
#             # RMSE
#             st.markdown('''
#                         - **RMSE** - *Root Mean Squared Error*, ou Raiz do Erro Quadr√°tico M√©dio:
#                         ''')
#             st.latex(r'''
#                     RMSE = \sqrt{\frac{1}{n} \sum_{i=1}^{n} (y_{true} - y_{pred})^2}
#                     ''')
#             # MAE
#             st.markdown('''
#                         - **MAE** - *Mean Absolute Error*, ou Erro M√©dio Absoluto:
#                         ''')
#             st.latex(r'''
#                     MAE = \frac{1}{n} \sum_{i=1}^{n} |y_{true} - y_{pred}|
#                     ''')
#             # MAPE
#             st.markdown('''
#                         - **MAPE** - *Mean Absolute Percentage Error*, ou Erro Percentual Absoluto M√©dio:
#                         ''')
#             st.latex(r'''
#                     MAPE = \frac{1}{n} \sum_{i=1}^{n} \left| \frac{y_{true} - y_{pred}}{y_{true}} \right| \times 100
#                     ''')
            
#             st.markdown('<br>', unsafe_allow_html=True)
            
#             # bot√£o para exibir scores
#             if st.button('üìä Exibir Scores'):
#                 scores_best_df = pd.read_parquet(r'data/xgboost_best_scores.parquet')
#                 scores_best_df = scores_best_df.iloc[[-1]]
#                 scores_best_df = scores_best_df.T
#                 scores_best_df.columns = scores_best_df.iloc[0]
#                 scores_best_df = scores_best_df[1:]
#                 scores_best_df = scores_best_df.rename(columns={'XGBoost Best5': 'XGBoost Best'})
#                 # mostrar dataframe
#                 st.dataframe(scores_best_df)
            
#             st.markdown('<br>', unsafe_allow_html=True)
            
#             create_analysis('Resultados do Modelo Final', 
#                             r'''
#                                 Em compara√ß√£o com modelo baseline, houve melhora consider√°vel nas m√©tricas de avalia√ß√£o:<br>
#                                 A RMSE melhorou em 38.08%, a MAE melhorou em 37.51% e a MAPE melhorou em 38.5%
#                              ''')
            
#             st.markdown('<br>', unsafe_allow_html=True)
            
#     else:
#         # modelo Prophet
#         # texto
#         st.markdown('''
#                     <p style="font-size: 18px">
#                     O Prophet, criado pelo Facebook em 2008 sob autoria dos cientistas de dados Sean J. Taylor e Ben Letham, 
#                     √© uma biblioteca open-source baseada em modelos decompon√≠veis de s√©ries temporais. 
#                     A ferramenta lida bem com dados ausentes e outliers, e foi projetada para ser f√°cil de usar. 
#                     O Prophet usa 3 componentes principais para a decomposi√ß√£o: tend√™ncia (<i>trend</i>), 
#                     sazonalidade (<i>seasonality</i>) e feriados (<i>holidays</i>). 
#                     Assim, pode ser expressado atrav√©s da equa√ß√£o:
#                     </p>
#                     ''', unsafe_allow_html=True)
        
#         st.latex(r'''
#                     y(t) = g(t) + s(t) + h(t) + e(t)
#                   ''')
        
#         # text
#         st.markdown('''
#                     Em que:
#                     - Growth g(t): representa a curva de crescimento linear ou log√≠stica, para modelar mudan√ßas n√£o peri√≥dicas em s√©ries temporais. Por padr√£o, o Prophet usa o modelo de crescimento linear para as previs√µes.
#                     - Seasonality s(t): a s√©rie de Fourier √© usada para modelar efeitos sazonais ou mudan√ßas peri√≥dicas (por exemplo: o ciclo semanal, mensal e anual). Para aprender e prever tais efeitos, o Prophet depende da s√©rie de Fourier para fornecer um modelo flex√≠vel.
#                     - Feriados e eventos h(t): o Prophet considera o efeito de feriados e permite adicionar os par√¢metro supper_window e lower_window, que estendem os efeitos dos feriados em torno de suas datas.
#                     - Termo de erro e(t): o termo de erro leva em conta quaisquer mudan√ßas incomuns n√£o acomodadas pelo modelo.
#                     ''')
        
#         # c√≥digo
#         with st.expander('üêç Exibir c√≥digo Python'):
#             st.code('''
#                     # importar o Prophet
#                     !pip install prophet                 # instalar biblioteca
#                     from prophet import Prophet          # importar biblioteca
#                     ''')
        
#         st.markdown('<br>', unsafe_allow_html=True)
        
#         # markdown
#         st.markdown('''
#                     <p style="font-size: 18px">
#                     Para utilizar o Prophet, √© necess√°rio criar um dataframe com duas colunas: ds (data) e y (valor).
#                     Em seguida, instanciamos o modelo Prophet, ajustamos os dados de treino e realizamos previs√µes.
#                     </p>
#                     ''', unsafe_allow_html=True)
        
#         # c√≥digo
#         with st.expander('üêç Exibir c√≥digo Python'):
#             st.code('''
#                     # criar dataframe
#                     df_prophet = df[['date', 'brent']].copy()
#                     df_prophet.columns = ['ds', 'y']
#                     ''')
        
#         # divider
#         st.markdown('---')   
        
#         # selecione o modelo
#         model_type = st.radio('Selecione o modelo:', ['Baseline', 'Final'])
#         if model_type == 'Baseline':
#             # prepara√ß√£o dos dados - t√≠tulo
#             st.markdown('''#### Prepara√ß√£o dos dados''')
#             # texto
#             st.markdown(r'''
#                         <p style="font-size: 18px">
#                         Para o modelo baseline, utilizaremos as colunas sp500, exxon e bp como regressores. Al√©m disso,
#                         utilizaremos 80% dos dados para treino e 20% para teste.
#                         </p>
#                         ''', unsafe_allow_html=True)

#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # baseline - divis√£o dos dados
#                         baseline_train_size = int(len(df_baseline) * 0.8)

#                         baseline_train = df_baseline.iloc[:baseline_train_size].copy()
#                         baseline_test = df_baseline.iloc[baseline_train_size:].copy()
#                         ''')
            
#             # gr√°fico com divis√£o dos dados
#             prophet_baseline_train_df = pd.read_parquet(r'data/prophet_baseline_train.parquet')
#             prophet_baseline_test_df = pd.read_parquet(r'data/prophet_baseline_test.parquet')
            
#             fig = go.Figure()
#             fig.add_trace(go.Scatter
#                         (x=prophet_baseline_train_df['ds'], y=prophet_baseline_train_df['y'],
#                         mode='lines', name='Treino', line=dict(color='#4089FF')))
#             fig.add_trace(go.Scatter
#                         (x=prophet_baseline_test_df['ds'], y=prophet_baseline_test_df['y'],
#                         mode='lines', name='Teste', line=dict(color='#f6c409')))
#             fig.update_layout(title='Prophet Baseline - Treino e Teste',
#                             title_font_size=20, template='plotly_dark')
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             st.plotly_chart(fig, use_container_width=True)
            
#             # markdown
#             st.markdown('''#### Treinamento do modelo''')
#             # texto
#             st.markdown('''<p style="font-size: 18px">
#                         Com os dados preparados, podemos treinar o modelo Prophet.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # Instanciar o modelo Prophet
#                         baseline_model = Prophet()     # par√¢metros default
                        
#                         # Ajustar o modelo
#                         baseline_model.fit(baseline_train)
#                         ''')
            
#             # previs√µes
#             st.markdown('''#### Previs√µes''')
#             # texto
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Com o modelo treinado, realizamos previs√µes para o pre√ßo do petr√≥leo Brent.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         from prophet.make_future_dataframe import make_future_dataframe
                        
#                         # Criar dataframe futuro
#                         future_baseline = baseline_model.make_future_dataframe(periods=len(baseline_test),
#                                                                                 freq='B')     # dias √∫teis
                        
#                         # Realizar previs√µes
#                         forecast_baseline = baseline_model.predict(future_baseline)
#                         ''')
                
#             # previs√µes
#             prophet_baseline_forecast_df = pd.read_parquet(r'data/prophet_baseline_forecast.parquet')
#             # carregar modelo baseline com pickle
#             with open(r'models/prophet_baseline_model.pkl', 'rb') as file:
#                 prophet_baseline = pickle.load(file)
            
#             fig = plot_plotly(prophet_baseline, prophet_baseline_forecast_df)
#             fig.update_layout(title='Prophet Baseline - Predi√ß√£o vs. Real', title_font_size=20)
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             # scatter to blue
#             fig.for_each_trace(lambda t: t.update(marker=dict(color='#4089FF')))
#             # line to pink
#             fig.for_each_trace(lambda t: t.update(line=dict(color='#e34592')))
#             st.plotly_chart(fig, use_container_width=True)
            
#             # avalia√ß√£o com cross-validation
#             st.markdown('''#### Avalia√ß√£o do modelo''')
#             # texto
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Para avaliar o modelo, utilizamos a t√©cnica de valida√ß√£o cruzada (cross-validation).
#                         O Prophet possui uma fun√ß√£o interna para realizar a valida√ß√£o cruzada, que divide os dados em
#                         janelas temporais e treina o modelo em cada uma delas.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         from prophet.diagnostics import cross_validation
#                         from prophet.diagnostics import performance_metrics
                        
#                         # Realizar cross-validation
#                         cv_baseline = cross_validation(baseline_model,
#                                                         initial='200 days',
#                                                         period='60 days',
#                                                         horizon='30 days')
                        
#                         # M√©tricas
#                         metrics_baseline = performance_metrics(cv_baseline)
#                         ''')
            
#             # bot√£o para exibir scores
#             if st.button('üìä Exibir Scores'):
#                 # dataframe com scores
#                 prophet_baseline_dict = {'Horizonte': '3 dias',
#                                         'RMSE': 15.2261,
#                                         'MAE': 8.9039,
#                                         'MAPE': 0.1953}
#                 st.write(prophet_baseline_dict)
            
#             st.markdown('<br>', unsafe_allow_html=True)
            
#             prophet_metrics_text = r'''
#                         Para um horizonte de previs√£o de 3 dias, o modelo atingiu<br> 
#                         RMSE de 15.22, MAE de 8.90 e MAPE de 19.53%.
#                         '''
            
#             create_analysis('Resultados do Modelo Baseline', prophet_metrics_text)
            
#             st.markdown('<br>', unsafe_allow_html=True)
            
#         else:
#             # prepara√ß√£o dos dados - t√≠tulo
#             st.markdown('''#### Prepara√ß√£o dos dados''')
#             # texto
#             st.markdown(r'''
#                         <p style="font-size: 18px">
#                         Para o modelo final, utilizaremos todas as colunas do dataset como regressores. Al√©m disso,
#                         utilizaremos a fun√ß√£o Grid Search para encontrar os melhores par√¢metros para o modelo.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # final - divis√£o dos dados
#                         final_train_size = int(len(df_final) * 0.8)

#                         final_train = df_final.iloc[:final_train_size].copy()
#                         final_test = df_final.iloc[final_train_size:].copy()
#                         ''')
            
#             # gr√°fico com divis√£o dos dados
#             prophet_final_train_df = pd.read_parquet(r'data/prophet_final_train.parquet')
#             prophet_final_test_df = pd.read_parquet(r'data/prophet_final_test.parquet')
            
#             fig = go.Figure()
#             fig.add_trace(go.Scatter
#                         (x=prophet_final_train_df['ds'], y=prophet_final_train_df['y'],
#                         mode='lines', name='Treino', line=dict(color='#4089FF')))
#             fig.add_trace(go.Scatter
#                         (x=prophet_final_test_df['ds'], y=prophet_final_test_df['y'],
#                         mode='lines', name='Teste', line=dict(color='#f6c409')))
#             fig.update_layout(title='Prophet Final - Treino e Teste',
#                             title_font_size=20, template='plotly_dark')
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             st.plotly_chart(fig, use_container_width=True)
            
#             # markdown
#             st.markdown('''#### Treinar o modelo''')
#             # texto
#             st.markdown('''<p style="font-size: 18px">
#                         Com os dados preparados, podemos criar a lista de par√¢metros e realizar a busca dos melhores par√¢metros, 
#                         com base na m√©trica MAPE.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         import itertools
#                         from prophet.make_holidays import make_holidays
                        
#                         # Criar lista de par√¢metros
#                         param_grid = {
#                                         'changepoint_prior_scale': np.linspace(0.001, 0.5, 3),
#                                         'seasonality_prior_scale': np.linspace(0.01, 10, 3),
#                                         'holidays_prior_scale': [0.1, 10],
#                                      }
                        
#                         # Combinar par√¢metros
#                         all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]
                        
#                         results = []
#                         periods=252
                        
#                         # Iterar sobre os par√¢metros
#                         for i, params in enumerate(all_params):
#                             # Instanciar o modelo
#                             model = Prophet(**params)
                            
#                             # Adicionar regressores
#                             for regressor in regressors.columns:
#                                 model.add_regressor(regressor)
                                
#                             # Adicionar feriados
#                             model.add_country_holidays(country_name='US')
                            
#                             # Ajustar o modelo
#                             model.fit(train)
                            
#                             # Criar dataframe futuro
#                             future = model.make_future_dataframe(periods=periods, 
#                                                                 freq='B', 
#                                                                 include_history=True)
                                                                
#                             # Adicionar regressores
#                             for regressor in regressors.columns:
#                                 future[regressor] = df[regressor]
                                
#                             # Realizar previs√µes
#                             forecast = model.predict(future)
                            
#                             # predictions
#                             predictions = forecast[['ds', 'yhat']].tail(periods)
#                             # calculate the error
#                             error = mape(df['y'], forecast['yhat'])
#                             # append the results
#                             results.append([params, error])
                            
#                         results = pd.DataFrame(results, columns=['params', 'mape'])
#                         results = results.sort_values('mape', ascending=True)
                        
#                         best_params = results.iloc[0, 0]
#                         ''')
                
#             # markdown
#             st.markdown('''
#                         <p style="font-size: 18px"><br>
#                         O melhor modelo, com MAPE de 12.13%, foi obtido com os seguintes par√¢metros:<br>
#                         - <b>changepoint_prior_scale</b>: 0.5<br>
#                         - <b>seasonality_prior_scale</b>: 0.01<br>
#                         - <b>holidays_prior_scale</b>: 0.01
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # markdown
#             st.markdown('''#### Avalia√ß√£o do modelo''')
#             # texto
#             st.markdown('''
#                         <p style="font-size: 18px">
#                         Agora, modelos treinar o melhor modelo e realizar previs√µes.
#                         Com isso, podemos avaliar o modelo com a valida√ß√£o cruzada.
#                         </p>
#                         ''', unsafe_allow_html=True)
            
#             # c√≥digo
#             with st.expander('üêç Exibir c√≥digo Python'):
#                 st.code('''
#                         # Instanciar o modelo
#                         best_model = Prophet(**best_params)
                        
#                         # Adicionar regressores
#                         for regressor in regressors.columns:
#                             final_model.add_regressor(regressor)
                        
#                         # Adicionar feriados
#                         final_model.add_country_holidays(country_name='US')
                        
#                         # Ajustar o modelo
#                         final_model.fit(final_train)
                        
#                         # Realizar cross-validation
#                         cv_final = cross_validation(final_model,
#                                                     initial='200 days',
#                                                     period='60 days',
#                                                     horizon='30 days')
                        
#                         # M√©tricas
#                         metrics_final = performance_metrics(cv_final)
#                         ''')
            
#             # plotar
#             prophet_final_forecast_df = pd.read_parquet(r'data/prophet_final_forecast.parquet')
#             # carregar modelo final com pickle
#             with open(r'models/prophet_final_model.pkl', 'rb') as file:
#                 prophet_final = pickle.load(file)
                
#             fig = plot_plotly(prophet_final, prophet_final_forecast_df)
#             fig.update_layout(title='Prophet Final - Predi√ß√£o vs. Real', title_font_size=20)
#             fig.update_xaxes(title=None)
#             fig.update_yaxes(title='Pre√ßo (U$D )')
#             # scatter to blue
#             fig.for_each_trace(lambda t: t.update(marker=dict(color='#4089FF')))
#             # line to pink
#             fig.for_each_trace(lambda t: t.update(line=dict(color='#e34592')))
#             st.plotly_chart(fig, use_container_width=True)
            
#             # bot√£o para exibir scores
#             if st.button('üìä Exibir Scores'):
#                 # dataframe com scores
#                 prophet_final_dict = {'Horizonte': '3 dias',
#                                       'RMSE': 10.7325,
#                                       'MAE': 6.1403,
#                                       'MAPE': 0.1211}
#                 st.write(prophet_final_dict)

#             st.markdown('<br>', unsafe_allow_html=True)
            
#             prophet_metrics_text = r'''
#                         Para um horizonte de previs√£o de 3 dias, o modelo atingiu<br>
#                         RMSE de 10.73, MAE de 6.14 e MAPE de 12.11%.<br>
#                         Em compara√ß√£o com o modelo baseline, houve melhora de<br>15.22% sobre a m√©trica RMSE, 8.9% sobre a MAE e 
#                         37.97% sobre a MAPE.
#                         '''

#             create_analysis('Resultados do Modelo Final', prophet_metrics_text)

# conclus√£o
# elif page == page_3:
#     # t√≠tulo
#     st.title('Conclus√£o')
#     # separador
#     st.markdown('<br>', unsafe_allow_html=True)
#     # texto
#     st.markdown('''
#                 <p style="font-size: 20px">
#                     Neste projeto, foram treinados dois modelos para prever o pre√ßo do petr√≥leo Brent: XGBoost e Prophet.
#                     <br><br>
#                     O modelo XGBoost obteve <b>RMSE de 15.89</b>, <b>MAE de 12.31</b> e <b>MAPE de 16.06%</b>, 
#                     o modelo Prophet obteve <b>RMSE de 10.73</b>, <b>MAE de 6.14</b> e <b>MAPE de 12.11%</b>. 
#                     Com base nas configura√ß√µes atuais, o modelo Prophet obteve melhores m√©tricas de avalia√ß√£o.
#                     <br>
#                 </p>
#                 ''', unsafe_allow_html=True)

#     st.markdown('<br>', unsafe_allow_html=True)
    
#     st.markdown('---')
    
#     # pr√≥ximos passos
#     st.markdown('''## Principais Insights''')
    
#     # texto
#     st.markdown('''
#                 <p style="font-size: 18px">
#                     Os principais <i>insights</i> e respectivas etapas de melhorias ao projeto,
#                     obtidos durante os processos de an√°lise dos dados e constru√ß√£o dos modelos, s√£o retratados a seguir:
#                     <br>
#                 </p>
#                 ''', unsafe_allow_html=True) 
                
#     # melhoria do modelo XGBoost
#     st.markdown('''#### Melhoria do Modelo XGBoost''')
#     # texto
#     st.markdown('''
#                 <p style="font-size: 18px">
#                     - <b>Pr√≥ximo passo:</b> utilizar outros modelos para que o XGBoost possa extrapolar previs√µes para 
#                       al√©m dos limites dos dados de treinamento.
#                 <br>
#                 </p>
#                 ''', unsafe_allow_html=True)    
    
#     create_insight(
#                     'Extrapola√ß√£o de Dados na Previs√£o',
#                     '''
#                         O modelo XGBoost, assim como quaisquer algoritmos baseados em √°rvore, 
#                         possui uma desvantagem para tarefas de regress√£o: suas predi√ß√µes respeitar√£o os 
#                         limites dos dados utilizados no treinamento. Ou seja, existe dificuldade em <b>extrapolar</b> os 
#                         valores m√°ximo e m√≠nimo do intervalo de dados de treinamento. Por isso, se faz interessante 
#                         combinar esse modelo a outros, como modelos lineares ou mesmo Redes Neurais Recorrentes, 
#                         como <i>Long Short-Term Memory</i> (LSTM).
#                     '''
#                     )

#     st.markdown('<br>', unsafe_allow_html=True)

#     # t√≠tulo
#     st.markdown('''#### Modelos de *Ensemble Learning*''')
#     # texto
#     st.markdown('''
#                 <p style="font-size: 18px">
#                     O pre√ßo do petr√≥leo √© influenciado por diversos fatores, como oferta e demanda.
#                     Al√©m disso, eventos globais, como guerras e desastres naturais, tamb√©m podem afet√°-lo.
#                     Logo, essa s√©rie temporal n√£o √© estacion√°ria e possui comportamento n√£o linear. Fatos inesperados, 
#                     como os apresentados na se√ß√£o "An√°lise", n√£o s√£o facilmente capturados por um √∫nico modelo.<br><br>
#                     - <b>Pr√≥ximo passo:</b> empregar a t√©cnica de <i>ensemble learning</i> para combinar modelos.
#                     <br>
#                 </p>
#                 ''', unsafe_allow_html=True)
    
#     # criar insight
#     create_insight('Complexidade do Pre√ßo do Petr√≥leo', 
#                    '''
#                         Sugere-se a utiliza√ß√£o de <i>ensemble learning</i> para combinar modelos de previs√£o.
#                         Esses modelos n√£o precisam se voltar apenas ao pre√ßo do petr√≥leo, mas tamb√©m a outros fatores fundamentais - como produ√ß√£o e mercado.<br>
#                         Um modelo de classifica√ß√£o para prever "alta" ou "baixa" do pre√ßo do petr√≥leo pode compor uma <i>feature</i> adicional.<br>
#                         Redes Neurais Convolucionais, ou <i>Convolutional Neural Networks</i> (CNN) s√£o eficazes para an√°lise de imagens de sat√©lite e previs√£o de eventos clim√°ticos.
#                         CNNs tamb√©m podem ser usadas para previs√£o, a partir de gr√°ficos de <i>candlestick</i>, utilizados por <i>traders</i> para an√°lise t√©cnica.
#                     ''')
    
#     st.markdown('<br>', unsafe_allow_html=True)
    
#     st.markdown('''#### An√°lise de Sentimentos & Mercado Futuro''')

#     st.markdown('''
#                 <p style="font-size: 18px">
#                     A an√°lise de sentimentos √© uma t√©cnica de Processamento de Linguagem Natural,
#                     ou <i>Natural Language Processing</i> (NLP), que visa identificar e classificar a polaridade 
#                     emocional de um texto. Ela utiliza algoritmos e modelos de aprendizado de m√°quina para 
#                     atribuir uma pontua√ß√£o de sentimento a cada trecho, indicando se √© positivo, negativo ou neutro.
#                     Para melhoria do modelo, um passo importante √© a constru√ß√£o de uma <i>feature</i> que 
#                     capture a opini√£o p√∫blica sobre o mercado de petr√≥leo em tempo real, a partir de not√≠cias e redes sociais. 
#                     Implementar esses sentimentos no modelo ajuda a incorporar tend√™ncias emergentes e 
#                     mudan√ßas de humor que n√£o seriam capturadas apenas por dados hist√≥ricos de pre√ßos.<br><br>
#                     - <b>Pr√≥ximo passo:</b> integrar o modelo com outras fontes de dados sobre o mercado de futuro.
#                     <br>
#                 </p>
#                 ''', unsafe_allow_html=True)

#     create_insight('Mercado Futuro & An√°lise de Sentimento', 
#                      '''
#                         A an√°lise de sentimento tamb√©m contribui para a estabilidade das previs√µes, 
#                         conforme medido pelo EV (<i>Error Variance</i>, ou Vari√¢ncia do Erro). A adi√ß√£o de sentimentos extra√≠dos por textos 
#                         tende a estabilizar os resultados, reduzindo a variabilidade das previs√µes e tornando-as mais confi√°veis.<br>
#                         Al√©m disso, criar features baseadas em contratos futuros de petr√≥leo e ajudar√° a 
#                         entender dados de extra√ß√£o e estoque. Tamb√©m, o volume de transa√ß√µes no mercado de futuro √© componente essencial para o c√°lculo 
#                         de outros indicadores t√©cnicos, como o <i>Open Interest</i>, que mede o n√∫mero de contratos em aberto.
#                       ''')
    
#     st.markdown('<br>', unsafe_allow_html=True)    
    
#     # t√≠tulo
#     st.markdown('''#### Database na Nuvem''')
#     # texto
#     st.markdown('''
#                 <p style="font-size: 18px">
#                     MLOps √© uma pr√°tica que visa integrar o desenvolvimento de modelos de Machine Learning 
#                     com a opera√ß√£o de sistemas. Para essa etapa, √© importante criar um pipeline de dados.<br><br>
#                     - <b>Pr√≥ximo passo:</b> <i>deploy</i> da aplica√ß√£o na nuvem, com a Amazon Web Services (AWS).<br>
#                         * <b>Amazon S3</b> para armazenamento do modelo<br>
#                         * <b>Amazon Redshift</b> para armazenamento dos dados estruturados<br>
#                         * <b>Amazon Glue</b> para ETL - <i>Extract Transform Load</i><br>
#                         * <b>Amazon SageMaker</b> para treinamento de modelos de Machine Learning<br>
#                 </p>
#                 ''', unsafe_allow_html=True)

#     # criar insight
#     create_insight(
#                     'Vantagens de um Database na Nuvem',
#                    '''
#                         - Escalabilidade: aumenta ou diminui a capacidade de armazenamento conforme a demanda.<br>
#                         - Seguran√ßa: os dados s√£o armazenados em servidores seguros e protegidos por criptografia.<br>
#                         - Acessibilidade: os dados podem ser acessados de qualquer lugar e a qualquer momento.<br>
#                         - Backup: salvamento autom√°tico de dados, que podem ser recuperados em caso de falhas.<br>
#                         - Integra√ß√£o: integra√ß√£o com outras ferramentas, como pipelines de dados e APIs.
#                         '''
#                      )
    
#     st.markdown('<br>', unsafe_allow_html=True)
    
#     st.markdown('''#### Desenvolver API''')

#     st.markdown('''<p style="font-size: 18px">
#                 API, ou <i>Application Programming Interface</i>, √© um conjunto de regras e protocolos que 
#                 permitem a comunica√ß√£o entre sistemas.<br><br>
#                 - <b>Pr√≥ximo passo:</b> criar API para disponibilizar o modelo para usu√°rios e outras aplica√ß√µes.
#                 <br>
#                 </p>
#                 ''', unsafe_allow_html=True)
                        
#     # criar insight
#     create_insight('API', 
#                    '''
#                         - Facilita o acesso √†s previs√µes do modelo, permitindo que outras aplica√ß√µes e sistemas consumam os dados.<br>
#                         - Pode ser utilizada para criar dashboards, relat√≥rios e aplica√ß√µes web que consomem as previs√µes do modelo.<br>
#                         - Permite integra√ß√£o com outros sistemas, como CRMs (<i>Customer Relationship Management</i>) e 
#                           ERPs (<i>Enterprise Resource Planning).
#                     ''')
    
#     st.markdown('<br>', unsafe_allow_html=True)
    
    
# refer√™ncias        
else:
    st.title('Refer√™ncias')
    st.markdown('<br>', unsafe_allow_html=True)
    # subt√≠tulo
    st.header('Fontes de dados')
    st.markdown('''
                <p style="font-size: 18px">
                    Os dados utilizados neste projeto foram obtidos a partir das fontes listadas abaixo:
                </p>
                ''', unsafe_allow_html=True)
    
    # lista de fontes de dados
    st.markdown('''
                #### [**IPEA**](http://www.ipeadata.gov.br/Default.aspx) - Instituto de Pesquisa Econ√¥mica Aplicada
                Portal de dados econ√¥micos do governo brasileiro, disponibiliza dados de diversos indicadores econ√¥micos, 
                como infla√ß√£o, PIB, taxa de juros, c√¢mbio e pre√ßos de *commodities*. As s√©ries temporais podem ser baixadas 
                em formato `.csv`. O IPEA tamb√©m permite acesso atrav√©s de requisi√ß√µes `HTTP` por meio de API.
                ''')
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                # acessar dados do IPEA
                
                !pip install ipeadatapy                 # instalar biblioteca
                import ipeadatapy as ipea               # importar biblioteca
                
                #ipea.list_series()                     # lista de s√©ries dispon√≠veis
                
                df = ip.timeseries(ipea_table_code)     # obter dados do petr√≥leo Brent
                ''')
    
    st.markdown('''
                #### [**FRED**](https://fred.stlouisfed.org/series/DCOILBRENTEU) - Federal Reserve Economic Data
                Banco de dados econ√¥micos mantido pelo Federal Reserve Bank of St. Louis, nos EUA. 
                Ele cont√©m uma vasta quantidade de dados econ√¥micos, incluindo s√©ries temporais de pre√ßos de *commodities*, 
                como o [**petr√≥leo Brent**](https://fred.stlouisfed.org/series/DCOILBRENTEU).
                Os dados podem ser baixados em formato `.csv`. O FRED disponibiliza tamb√©m permite acesso atrav√©s de requisi√ß√µes `HTTP` por meio de API.
                ''')

    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                    # acessar dados do FRED
                    
                    !pip install pandas_datareader            # instalar biblioteca
                    import pandas_datareader as pdr           # importar biblioteca
                    
                    df = pdr.get_data_fred('DCOILBRENTEU')    # obter dados do petr√≥leo Brent
                ''')

    st.markdown('''
                #### [**Yahoo Finance**](https://finance.yahoo.com/quote/CL=F?p=CL=F) - Yahoo Finance
                Plataforma de not√≠cias e dados financeiros, permite acessar cota√ß√µes de ativos, √≠ndices 
                e pre√ßos de *commodities*. Os dados podem ser baixados em formato `.csv` e tamb√©m acessados por meio de API.
                A biblioteca [`yfinance`](https://pypi.org/project/yfinance/) permite acessar os dados do Yahoo Finance diretamente no Python:
                ''')
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                    # acessar dados do Yahoo Finance
                    
                    !pip install yfinance            # instalar biblioteca
                    import yfinance as yf            # importar biblioteca
                    
                    df = yf.download('BZ=F')         # obter dados do petr√≥leo Brent
                ''')

    st.markdown('<br>', unsafe_allow_html=True)
    # subt√≠tulo para Bibliografia
    st.header('Bibliografia')
    # lista de links
    st.markdown('''
                    - [**OPEC**](https://www.opec.org/opec_web/en/about_us/24.htm) - Organization of the Petroleum Exporting Countries
                    - [**CBI**](https://cbie.com.br/) - Centro Brasileiro de Infraestrutura
                    - [**Investopedia**](https://www.investopedia.com/terms/f/futuresmarket.asp) - Futures Market
                    - [**Wikipedia**](https://en.wikipedia.org/wiki/Brent_Crude) - Brent Crude Oil
                    - [**AWS**](https://aws.amazon.com/pt/) - Amazon Web Services
                    - [**Super Interessante**](https://super.abril.com.br/coluna/deriva-continental/nos-bastidores-da-terra-geologa-explica-a-formacao-do-petroleo) - Nos bastidores da Terra: ge√≥loga explica a forma√ß√£o do petr√≥leo
                    - [**Forecasting Oil Price Using Web-based Sentiment Analysis**](https://www.mdpi.com/1996-1073/12/22/4291) - 
                        Energies (2019), por ZHAO, Lu-Tao; ZENG, Guan-Rong; WANG, Wen-Jing; ZHANG, Zhi-Gang
                    - [**An√°lise pr√°tica de s√©ries temporais: predi√ß√£o com estat√≠stica e aprendizado de m√°quina**](https://www.amazon.com.br/An√°lise-Pr√°tica-S√©ries-Temporais-Estat√≠stica/dp/8550815624) - 
                        Alta Books (2021), por NIELSEN, Aileen
                ''')
    
    
# footer
st.markdown('<br>', unsafe_allow_html=True)

st.markdown('---')

# texto -> Agradecimentos
st.markdown('''<p style="font-size: 18px; text-align: center;">
            Obrigado por acompanhar este projeto! üöÄ
            <br>
            </p>''', unsafe_allow_html=True)

# linkedin = 'https://www.linkedin.com/in/viniplima/'
# github = 'https://github.com/euvina/'

# mail = 'pradolimavinicius@gmail.com'
# subject = 'Contato via Streamlit - Projeto Previs√£o de Pre√ßo do Petr√≥leo Brent'

# # √°rea de contato
# st.markdown('''<p style="font-size: 18px; text-align: center;">
#             üìß Entre em contato:<br>
#             <a href="mailto:{}?subject={}">
#             <img src="https://img.shields.io/badge/-Gmail-D14836?style=for-the-badge&logo=Gmail&logoColor=white" alt="Gmail">
#             </a>
#             <a href="{}">
#             <img src="https://img.shields.io/badge/-GitHub-181717?style=for-the-badge&logo=GitHub&logoColor=white" alt="GitHub">
#             </a>
#             <a href="{}">
#             <img src="https://img.shields.io/badge/-LinkedIn-0077B5?style=for-the-badge&logo=LinkedIn&logoColor=white" alt="LinkedIn">
#             </a>
#             </p>'''.format(mail, subject, linkedin, github), unsafe_allow_html=True)
