# Importar bibliotecas
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
import pmdarima as pm

from keras.models import Sequential
from keras.layers import LSTM, Dense
from plotly.subplots import make_subplots
from prophet import Prophet
from prophet.plot import plot_plotly
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import acf, pacf, adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_absolute_error, mean_squared_error,accuracy_score
from sklearn.preprocessing import MinMaxScaler

from sklearn.model_selection import TimeSeriesSplit
from statsmodels.tsa.stattools import adfuller

import pickle

from utils import (normality_test, 
                   create_warning, 
                   create_quote, 
                   create_curiosity, 
                   create_insight, 
                   create_analysis, 
                   insert_image)

# layout
st.set_page_config(layout='centered', 
                   page_title='ONG PASSOS M√ÅGICOS', 
                   page_icon='‚ö°', initial_sidebar_state='auto')

# pagina√ß√£o
page_0 = 'Introdu√ß√£o'
page_1 = 'An√°lise'
page_2 = 'Modelos'
page_3 = 'Conclus√£o'
page_4 = 'Refer√™ncias'

# menu lateral
st.sidebar.title('Menu')
page = st.sidebar.radio('Selecione a p√°gina:', 
                        [page_0, page_1, page_2, page_3, page_4])
     
# Introdu√ß√£o
if page == page_0:
    
    # t√≠tulo da p√°gina
    st.title('Impacto')
    
    # descri√ß√£o
    st.markdown('''
                Modelos de forecasting para o pre√ßo di√°rio do petr√≥leo Brent (U$D ), 
                <br>desenvolvido para a <b>P√≥s-Tech Data Analytics ‚Äî FIAP</b>, em Mar√ßo-Maio de 2024.
                <br><br>
                Compara√ß√£o entre os modelos <b>XGBoost</b> e <b>Prophet</b>.
                ''', unsafe_allow_html=True)

    st.markdown('<br>', unsafe_allow_html=True)
    
    create_warning('Importante', 
                   '''
                        Este artigo tem fins exclusivamente educacionais 
                        e n√£o se trata de recomenda√ß√£o para investimento de qualquer natureza.
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)

    # expans√£o com nota t√©cnica
    with st.expander('üóíÔ∏è Nota T√©cnica'):
        st.markdown('''
        #### Dados do projeto

        **üöÄ Objetivo**: prever o pre√ßo do petr√≥leo Brent (U$D ) para o pr√≥ximo dia.

        ---
        
        **üõ∏ Modelos**: os dados utilizados para an√°lise e treinamento no modelo foram coletados em 18/05/2024 e correspondem ao per√≠odo de 20/05/1987 a 13/05/2024.
        - [XGBoost](https://xgboost.readthedocs.io/en/stable/)
        - [Prophet](https://facebook.github.io/prophet/)

        ---
        
        **üì° Fontes de dados**:
        - [IPEA](http://www.ipeadata.gov.br/Default.aspx)
        - [FRED](https://fred.stlouisfed.org/series/DCOILBRENTEU)
        - [Yahoo Finance](https://finance.yahoo.com/quote/CL=F?p=CL=F)

        ---
        
        **üßëüèª‚ÄçüöÄ Autor**: 
        - [Vin√≠cius Prado Lima](https://www.linkedin.com/in/viniplima/)

        ---
        
        **ü™ê Reposit√≥rio**: 
        - [GitHub](https://github.com/euvina/brent_oil_price_forecasting)

        ---
        
        ''')
    
    st.markdown('---')
    
    # contexto para o objeto de estado
    st.markdown('## O Petr√≥leo')
    
    st.markdown('''
                <p style="font-size: 18px">
                A palavra ‚Äúpetr√≥leo‚Äù √© origin√°ria do latim, a partir dos termos <i>‚Äúpetra‚Äù</i> e <i>‚Äúoleum‚Äù</i> - 
                que significam ‚Äú√≥leo de pedra‚Äù.<br>
                Esse √≥leo bruto √© composto, principalmente, por hidrocarbonetos, e resultante de um processo de transforma√ß√£o 
                que ocorre ao longo de milhares de anos, em bacias sedimentares.
                </p>
                ''', unsafe_allow_html=True)  
    
    create_quote('''
                O petr√≥leo come√ßa com a forma√ß√£o das bacias sedimentares, 
                cujo requisito b√°sico √© a disponibilidade de √°rea para a acumula√ß√£o de sedimentos 
                (material desagregado e transportado por rios, geleiras, vento e mar). 
                A Terra possui sete grandes placas tect√¥nicas e algumas microplacas. 
                Seu movimento ao longo da hist√≥ria geol√≥gica √© respons√°vel pela forma√ß√£o das 
                principais bacias sedimentares (espa√ßos que abrigam sedimentos) em todo o mundo. 
                Elas ocorrem tanto em terra quanto nos oceanos.
                ''', 
                'Nos Bastidores da Terra - Superinteressante', 
                'https://super.abril.com.br/coluna/deriva-continental/nos-bastidores-da-terra-geologa-explica-a-formacao-do-petroleo')
    
    
    st.markdown('''
                <p style="font-size: 18px">
                Vest√≠gios de mat√©ria org√¢nica em decomposi√ß√£o - principalmente algas e pl√¢nctons - 
                se acumulam no fundo de corpos de √°gua, como mares e lagos. 
                Esses restos s√£o cobertos por camadas de sedimentos que exercem cada vez mais press√£o e, 
                dado o calor ao longo do tempo, ocorre a forma√ß√£o do petr√≥leo. Esse processo √© extremamente lento 
                e, por isso, o petr√≥leo √© considerado um <b>recurso n√£o renov√°vel</b>.<br><br>
                ''' , unsafe_allow_html=True)
    
    insert_image(image_path = r'img/bacias_sedimentares_revista_superinteressante.webp',
                 source = 'https://super.abril.com.br/coluna/deriva-continental/nos-bastidores-da-terra-geologa-explica-a-formacao-do-petroleo',
                 caption = 'Processo de forma√ß√£o do petr√≥leo nas bacias sedimentares - Revista Superinteressante')
                  
    st.markdown('''
                <p style="font-size: 18px"><br>
                    Estudos geof√≠sicos a√©reos e terrestres s√£o realizados para 
                    a identifica√ß√£o de bacias sedimentares com maiores chances de encontrar petr√≥leo.
                    A profundidade dos po√ßos de petr√≥leo em √°reas terrestres (<i>onshore</i>) varia, em m√©dia, 
                    entre 1.500 e 3.000 metros. J√° em √°reas no mar (<i>offshore</i>), pode atingir at√© 10.000 metros. 
                    Portanto, a extra√ß√£o do petr√≥leo em terra firme √© diferente da explora√ß√£o em mar - 
                    e ambos os procedimentos s√£o complexos.<br>
                    <b>80 milh√µes de barris</b> de petr√≥leo s√£o extra√≠dos por dia em todo o mundo, 
                    onde cada barril cont√©m <b>159 litros</b> de petr√≥leo.</b><br><br>
                </p>
                ''', unsafe_allow_html=True)
    
    create_warning(' Perigo',
            '''
            Os meios de explora√ß√£o do petr√≥leo, bem como a queima constante, s√£o altamente danosos ao meio ambiente.
            A extra√ß√£o de petr√≥leo √© uma atividade que emite gases de efeito estufa, contribuindo para o aquecimento global.
            Tamb√©m, o derramamento de petr√≥leo no mar causa uma s√©rie de preju√≠zos ao ecossistema marinho, afetando a vida existente naquele local.
            Esses fatos refor√ßam a necessidade de investimento em fontes de energia limpa e renov√°vel.
            ''')  

# An√°lise
elif page == page_1:
    # carregar dados
    data = pd.read_parquet(r'data/data_w_indicators.parquet')
    # sidebar - adicionar filtros
    st.sidebar.title('‚öôÔ∏è Filtros')
    # filtros de ano com slider
    min_year = data.index.year.min()
    min_year = int(min_year)
    max_year = data.index.year.max()
    max_year = int(max_year)
    # filtro de pre√ßo com slider
    min_price = data['brent'].min()
    min_price = int(min_price)
    max_price = data['brent'].max()
    max_price = int(max_price)

    year_slider = st.sidebar.slider('Ano', min_year, max_year, (min_year, max_year))
    price_slider = st.sidebar.slider('Pre√ßo (U$D )', min_price, max_price, (min_price, max_price))
    # t√≠tulo da p√°gina
    st.title('An√°lise sobre o petr√≥leo Brent')
    # texto sobre o petr√≥leo Brent
    st.markdown('''
                <br>
                    <p style="font-size: 18px">
                    <b style = "font-size: 22px">O petr√≥leo Brent</b> √© uma classifica√ß√£o de petr√≥leo extra√≠do do Mar do Norte. 
                    Assim como o petr√≥leo West Texas Intermediate (WTI), 
                    o petr√≥leo Brent √© um dos principais tipos de petr√≥leo cru negociados no mercado internacional. 
                    Ambos s√£o usados como refer√™ncia para o pre√ßo do petr√≥leo em todo o mundo e 
                    amplamente negociados em <b>mercados de futuros</b>.<br><br>
                    </p>
                ''', unsafe_allow_html=True)
                    
    create_curiosity('Mercado Futuro', 
                    '''
                    Onde s√£o negociados contratos de compra ou venda de um ativo em uma data futura.<br>
                    O petr√≥leo √© negociado primeiro em mercados de futuros e, em seguida, 
                    esses contrados s√£o comercializados em bolsas de <i>commodities</i>, 
                    como a Intercontinental Exchange (ICE) em Londres.
                    ''')
    
    st.markdown('''
                <p style="font-size: 18px">
                <br><br>
                    O pre√ßo do petr√≥leo √© regulado pela Organiza√ß√£o dos Pa√≠ses Exportadores de Petr√≥leo (OPEP) ou, 
                    em ingl√™s, Organization of the Petroleum Exporting Countries (OPEC) - 
                    um cartel intergovernamental de 13 na√ß√µes, fundado em 15 de setembro de 1960.
                    O pre√ßo sofre influ√™ncia de fatores como a produ√ß√£o e o transporte, 
                    a demanda por produtos petrol√≠feros e a especula√ß√£o do mercado.
                    A unidade de medida dada para transa√ß√µes √© geralmente d√≥lares americanos por barril. 
                    O gr√°fico a seguir mostra a evolu√ß√£o do pre√ßo do petr√≥leo Brent ao longo dos anos:
                </p>
                ''', unsafe_allow_html=True)
    

    df = data.loc[(data.index.year >= year_slider[0]) & (data.index.year <= year_slider[1]) & 
                  (data['brent'] >= price_slider[0]) & (data['brent'] <= price_slider[1])]
    # gr√°fico com plotly para brent
    fig = px.line(df, x=df.index, y='brent', 
                  title='Pre√ßo do petr√≥leo Brent - Fechamento di√°rio',
                  labels={'brent': 'Pre√ßo (U$D )', 'date': 'Data'},                      
                  color_discrete_sequence=['#4089FF'],
                  template='plotly_dark')
    fig.update_layout(title_font_size=20) 
    fig.update_xaxes(title=None)
    fig.update_yaxes(range=[0, df['brent'].max() * 1.1])
    st.plotly_chart(fig, use_container_width=True)
    
    create_quote('''
                    Desde 1973, a posi√ß√£o da OPEP sempre foi a de desacelerar a produ√ß√£o ‚Äì 
                    atrav√©s de uma pol√≠tica de cotas para cada pa√≠s-membro ‚Äì 
                    quando surgiam sinais de queda nos pre√ßos, 
                    de modo a diminuir a oferta e reequilibrar as cota√ß√µes.
                    ''', 
                    'Os limites do pre√ßo do petr√≥leo - IPEA', 
                    'https://desafios.ipea.gov.br/index.php?option=com_content&view=article&id=3261&catid=28&Itemid=39')
    
    st.markdown('''
            <br>
                <p style="font-size: 18px">
                Ao longo dos 37 anos de registro, o valor do dinheiro teve grandes altera√ß√µes. Tamb√©m, 
                mudou o comportamento do mercado e a tecnologia evoluiu. Sem levar em conta tais componentes,
                ainda √© poss√≠vel enxergar, no gr√°fico acima, o efeito de marcos importantes:<br>
                <br>
                - A m√≠nima do per√≠odo data de 10 de Dezembro de 1998, com pre√ßo equivalente a U$D 9.10.<br>
                - A segunda menor m√≠nima ocorreu na Pandemia de COVID-19, em 21 de Abril de 2020, com pre√ßo em U$D 9.12.<br>
                - Em 2008, o pre√ßo do barril de petr√≥leo Brent atingiu o valor recorde de U$D 143.95. Com a grande recess√£o, 
                o pre√ßo caiu para U$D 33.73 no mesmo ano. A varia√ß√£o agressiva foi de -326.78%.<br>
                - As guerras entre EUA e Iraque (2003) e entre R√∫ssia e Ucr√¢nia (2022) 
                tamb√©m impactaram diretamente no pre√ßo do petr√≥leo - por quest√µes de oferta e demanda, 
                dificuldades na produ√ß√£o e circula√ß√£o de mercadorias, al√©m da especula√ß√£o do mercado.</b>
                <br><br>
                </p>
            ''', unsafe_allow_html=True)

    create_insight('Volatilidade', 
                   '''
                        Acompanhar fatos hist√≥ricos e incorpor√°-los no treinamento do modelo √© essencial. 
                        No entanto, cada novo evento pode gerar diferentes e imprevis√≠veis impactos no pre√ßos dos ativos.
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    # gr√°fico boxplot
    fig = px.box(df, x=df.index.year, y='brent', 
                title='Volatilidade anual no pre√ßo do Brent', 
                labels={'value': 'U$D '}, template='plotly_dark',
                color_discrete_sequence=['#4089FF'])
    fig.update_layout(title_font_size=20)
    fig.update_xaxes(title=None)
    fig.update_yaxes(range=[0, df['brent'].max() * 1.1])
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown('---')
    
    st.title('An√°lise de S√©rie Temporal')
            
    # diferencia√ß√£o e varia√ß√£o percentual
    st.markdown('''
                <br>
                    <p style="font-size: 18px">
                    <b>Diferenciar</b> uma s√©rie temporal √© importante por diversos motivos, como:<br>
                    - Estacionariedade: a m√©dia e a vari√¢ncia s√£o constantes ao longo do tempo.<br>
                    - Sazonalidade: permite minimizar ciclos que se repetem em intervalos regulares.<br>
                    - Tend√™ncia: ajuda a remover tend√™ncias para facilitar a modelagem.
                    <br><br>
                    </p>
                ''', unsafe_allow_html=True)
    
    # c√≥digo para diferen√ßa
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                # diferenciar s√©rie temporal
                df['brent_diff'] = df['brent'].diff()
                # varia√ß√£o percentual
                df['brent_pct'] = df['brent'].pct_change() * 100
                ''')   

    # same chart with make_sublots and y lower lim = 0
    fig = make_subplots(rows=3, cols=1, shared_xaxes=True,
                        subplot_titles=['Original', 'Diferen√ßa', 'Varia√ß√£o (%)'])
    # original
    fig.add_trace(go.Scatter(x=df.index, y=df['brent'], name='Original',
                            line=dict(color='#4089FF')), row=1, col=1)
    # diferen√ßa
    fig.add_trace(go.Scatter(x=df.index, y=df['brent_diff'], name='Diferen√ßa',
                            line=dict(color='#4089FF')), row=2, col=1)
    # varia√ß√£o percentual
    fig.add_trace(go.Scatter(x=df.index, y=df['brent_pct'], name='Varia√ß√£o (%)',
                            line=dict(color='#4089FF')), row=3, col=1)
    
    # atualizar layout
    fig.update_layout(title='Pre√ßo do Petr√≥leo Brent - Original, Diferen√ßa e Varia√ß√£o (%)',
                    title_font_size=20, showlegend=False, template='plotly_dark',
                    hovermode='x unified', height=600)
    fig.update_yaxes(range=[0, df['brent'].max() * 1.1], row=1, col=1)
    fig.update_yaxes(range=[-20, 20], row=2, col=1)
    fig.update_yaxes(range=[-60, 60], row=3, col=1)
    fig.update_xaxes(title='')
    st.plotly_chart(fig, use_container_width=True)
    
    
    # teste de estacionariedade
    st.markdown('''
                <p style="font-size: 18px">
                Com o teste estat√≠stico de Dickey-Fuller, podemos verificar se a s√©rie temporal √© estacion√°ria.<br>
                - <b>Hip√≥tese nula (H0)</b>: a s√©rie temporal n√£o √© estacion√°ria.<br>
                - <b>Hip√≥tese alternativa (H1)</b>: a s√©rie temporal √© estacion√°ria.<br>
                <br>
                ''', unsafe_allow_html=True)

    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                # teste de estacionariedade
                !pip install statsmodels
                from statsmodels.tsa.stattools import adfuller
                
                # executar teste
                adfuller(df['brent'].dropna())
                
                # resultados: 
                # - estat√≠stica do teste
                # - p-valor
                # - lags
                # - n√∫mero de observa√ß√µes
                # - valores cr√≠ticos
                ''')
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    # expandir resultados
    with st.expander('üìä Resultados do Teste de Dickey-Fuller'):
        # executar teste de Dickey-Fuller em brent_diff
        # auto-lag = AIC (Akaike Information Criterion):
            # penaliza a complexidade do modelo
        dftest = adfuller(df['brent_diff'], autolag='AIC', regression='c')
        # criar dataframe com resultados
        results_keys = ['Estat√≠stica do Teste', 'p-valor', 'Lags', 'Observa√ß√µes', 
                        'Valor Cr√≠tico (1%)', 'Valor Cr√≠tico (5%)', 'Valor Cr√≠tico (10%)']
        result_values = [dftest[0], dftest[1], dftest[2], dftest[3], 
                        dftest[4]['1%'], dftest[4]['5%'], dftest[4]['10%']]
        # criar dicion√°rio com chave e resultados
        results_dict = dict(zip(results_keys, result_values))
        # exibir resultados em dici√°rio
        st.write(results_dict)   

    st.markdown('<br>', unsafe_allow_html=True)
    
    create_analysis('Resultados do Teste de Dickey-Fuller',
                    '''
                    Conforme os resultados do teste de Dickey-Fuller, 
                    a s√©rie temporal da diferen√ßa do pre√ßo do petr√≥leo Brent √© estacion√°ria,
                    uma vez que tanto o p-valor √© menor que 0.05, 
                    quanto a estat√≠stica do teste √© menor que os valores cr√≠ticos da s√©rie.
                    ''')
    
    st.markdown('<br><br>', unsafe_allow_html=True)
    
    # buttom to select 1 of 2 charts
    selected_chart = st.radio('Selecione o gr√°fico:', ['Diferen√ßa', 'Varia√ß√£o Percentual (%)'])
    if selected_chart == 'Diferen√ßa':
        
        # histograma com a diferen√ßa
        fig = px.histogram(df, x='brent_diff', nbins=100,
                        title='Histograma da Diferen√ßa Di√°ria no Pre√ßo do Petr√≥leo Brent', 
                        color_discrete_sequence=['#4089FF'], 
                        marginal='box', histnorm='probability density',
                        labels={'value': 'Diferen√ßa'}, template='plotly_dark')
        fig.update_traces(marker_line_color='white', marker_line_width=1)
        fig.update_xaxes(title_text=None)
        fig.update_yaxes(title_text='')
        fig.update_layout(title_font_size=20,
                          width=600, height=500)
        st.plotly_chart(fig, use_container_width=True)
        
    else:
        # histograma com a varia√ß√£o percentual
        fig = px.histogram(df, x='brent_pct', nbins=100,
                        title='Histograma da Varia√ß√£o Percentual Di√°ria no Pre√ßo do Petr√≥leo Brent', 
                        color_discrete_sequence=['#4089FF'], marginal='box',
                        labels={'value': 'Percentual de Mudan√ßa'}, template='plotly_dark')
        fig.update_traces(marker_line_color='white', marker_line_width=1)
        fig.update_xaxes(title_text=None)
        fig.update_yaxes(title_text='')
        fig.update_layout(title_font_size=20,
                          width=600, height=500)
        st.plotly_chart(fig, use_container_width=True)
        
    st.markdown('''
                <p style="font-size: 18px">
                    <br>
                    O histograma da s√©rie diferenciada √© mais pr√≥ximo de uma 
                    distribui√ß√£o normal do que a s√©rie original.
                    Para verificar a normalidade, o teste de Kolmogorov-Smirnov √© aplicado, onde: <br>
                    - <b>Hip√≥tese nula (H0)</b>: a s√©rie diferenciada segue uma distribui√ß√£o normal.<br>
                    - <b>Hip√≥tese alternativa (H1)</b>: a s√©rie diferenciada n√£o segue uma distribui√ß√£o normal.<br>
                    <br>
                </p>
                ''', unsafe_allow_html=True)
    
    # resultados do teste de Kolmogorov-Smirnov
    with st.expander('üìä Resultados do Teste de Kolmogorov-Smirnov'):
        ks_results = normality_test(df['brent_diff'].dropna())
        # rename keys 'statistic' to 'Est√°tistica do Teste' and 'pvalue' to 'p-valor'
        ks_results = {k.replace('statistic', 'Estat√≠stica do Teste').replace('p-value', 'p-valor'): v 
                     for k, v in ks_results.items()}
        st.write(ks_results)
        
    st.markdown('<br>', unsafe_allow_html=True)
    
    create_analysis('Resultados do Teste de Kolmogorov-Smirnov',
                    '''
                    De acordo com o teste estat√≠stico de Kolmogorov-Smirnov,
                    o p-valor √© menor que 0.05, indicando que a hip√≥tese nula √© rejeitada.
                    Ent√£o, a s√©rie diferenciada <b>n√£o</b> segue uma distribui√ß√£o normal.
                    ''')   
    
    st.markdown('<br>', unsafe_allow_html=True)

    st.markdown('''
                <p style="font-size: 18px">
                    <br>
                    O gr√°fico a seguir mostra a varia√ß√£o do pre√ßo do barril de petr√≥leo Brent ao longo do tempo.
                    Note que as maiores varia√ß√µes correspondem ao m√™s de Maio, como nos anos 2008, 2009, 2020 e 2022. 
                    Por sua vez, as 2 maiores baixas do pre√ßo correspondem a Outubro/2008, em vista da Grande Recess√£o, e 
                    Mar√ßo/2020, in√≠cio da Pandemia de COVID-19.
                    <br>
                </p>
                ''', unsafe_allow_html=True)

    fig = px.imshow(df.pivot_table(index='year', columns=df.index.month, values='brent_diff'),
                labels=dict(color='Varia√ß√£o Brent'),
                title='Varia√ß√£o do Pre√ßo do Brent ao longo do tempo',
                color_continuous_scale='RdBu',
                width=800, height=1000,
                template='plotly_dark')
    # mostrar meses 1 por 1
    fig.update_xaxes(tickvals=list(range(1, 13)),
                    ticktext=['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
                              'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                    side='top', title='')
    fig.update_yaxes(title='')
    fig.update_layout(title_font_size=20)
    st.plotly_chart(fig, use_container_width=True)
    
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    A varia√ß√£o di√°ria do petr√≥leo Brent teve evolu√ß√£o constante nos √∫ltimos 10 anos dos dados (2014-2024), exceto em 2020.
                    A m√©dia de varia√ß√£o entre 2014 e 2019 foi de -0.007%, com desvio padr√£o de 2.16%. Durante os anos de 2020 e 2021,
                    a varia√ß√£o m√©dia foi de 0.15%, com desvio padr√£o de 5.05%. Al√©m disso, a varia√ß√£o m√°xima sobre o pre√ßo di√°rio 
                    durante a pandemia foi de 50.98%.<br><br>
                    A plotagem da vari√°vel em 3 dimens√µes, onde o eixo do gr√°fico que cont√©m a data √© 
                    desmembrado em 2 outros eixos (ano e m√™s), ajuda a enxergar padr√µes, 
                    como ciclos de sazonalidade e tend√™ncias:
                    <br>
                </p>
                ''', unsafe_allow_html=True)    


    # brent 3d x ano x m√™s
    fig = px.scatter_3d(df, x=df.index.year, y=df.index.month, z='brent',
                        title='Pre√ßo do Petr√≥leo Brent x Ano x M√™s',
                        labels={'x': 'Ano', 'y': 'M√™s', 'z': 'Pre√ßo'},
                        color=df.index.month,
                        color_continuous_scale='PuBu',
                        width=1000, height=800,
                        opacity=0.7,
                        template='plotly_dark')

    fig.update_layout(scene=dict( 
                                xaxis_title='Ano',
                                yaxis_title='M√™s',
                                zaxis_title='Pre√ßo (U$D )'),
                                coloraxis_colorbar=dict(title='M√™s'),
                                title_font_size=20)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # divider
    st.markdown('---')
    # t√≠tulo
    st.title('Features')
    
    st.markdown('''
                <p style="font-size: 18px">
                    <b><i>Features</i></b> podem ser extra√≠das a partir de datas, como:<br><br>
                    - m√™s e dia do m√™s<br>
                    - ano, trimestre e dia do ano<br>
                    - semana, dia da semana e semana do ano (calend√°rio ISO 8601)
                    <br>
                </p>
                ''', unsafe_allow_html=True)
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                !pip install pandas             # instalar biblioteca Pandas
                import pandas as pd             # importar biblioteca Pandas
                
                # fun√ß√£o para adicionar features de data
                def date_features(dataframe):
        
                df = dataframe.copy()
                df.index.rename('date', inplace=True)
                
                df['year'] = df.index.year
                df['month'] = df.index.month
                df['day'] = df.index.day
                df['day_of_week'] = df.index.dayofweek
                df['day_of_year'] = df.index.dayofyear
                df['week_of_year'] = df.index.isocalendar().week
                df['quarter'] = df.index.quarter
                
                return df
                
                # aplicar fun√ß√£o
                df = date_features(df)
                ''')    
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                Para a constru√ß√£o dos modelos de previs√£o, al√©m do pre√ßo do petr√≥leo Brent,
                outros √≠ndices representativos foram utilizados como regressores (<i>features</i>):
                
                - **SP500**: √çndice de a√ß√µes da bolsa de valores dos EUA (unidade: pontos)
                - **Exxon**: A√ß√µes da Exxon Mobil Corporation (unidade: U$D )
                - **BP**: A√ß√µes da British Petroleum (unidade: U$D )
                <br>
                ''', unsafe_allow_html=True)
    
    # plot
    fig = make_subplots(rows=3, cols=1, shared_xaxes=True,
                        subplot_titles=['SP500', 'Exxon', 'BP'])
    # SP500
    fig.add_trace(go.Scatter(x=df.index, y=df['sp500'], name='SP500',
                            line=dict(color='#4089FF')), row=1, col=1)
    # Exxon
    fig.add_trace(go.Scatter(x=df.index, y=df['exxon'], name='Exxon',
                            line=dict(color='#4089FF')), row=2, col=1)
    # BP
    fig.add_trace(go.Scatter(x=df.index, y=df['bp'], name='BP',
                            line=dict(color='#4089FF')), row=3, col=1)

    # atualizar layout
    fig.update_layout(title='√çndices de A√ß√µes e A√ß√µes de Empresas de Petr√≥leo',
                    title_font_size=20, showlegend=False, template='plotly_dark')
    fig.update_xaxes(title_text='')
    st.plotly_chart(fig)
    
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                A an√°lise de correla√ß√£o de Pearson ajuda a entender como as vari√°veis se relacionam entre si.
                Para dados econ√¥micos, fatos similares acontecem entre os pre√ßos absolutos e, portanto, 
                correla√ß√µes altas s√£o esperadas. Portanto, tamb√©m √© importante visualizar a 
                correla√ß√£o entre as s√©ries diferenciadas. 
                </p>
                ''', unsafe_allow_html=True)
    
    
    # selecionar se s√©rie diferenciada ou n√£o
    selected_series = st.radio('Selecione a s√©rie:', ['Original', 'Diferen√ßa'])
    
    if selected_series == 'Original':
        # control for selected features
        price_cols = ['brent', 'sp500', 'exxon', 'bp']
        # checkbox
        selected_features = st.multiselect('‚öôÔ∏è Selecione as features:', 
                                        price_cols, price_cols)
        # plotar correla√ß√£o
        corr = df[selected_features].corr().round(2)
        fig = px.imshow(corr, color_continuous_scale='blues', 
                        title='Correla√ß√£o entre as vari√°veis',
                        labels=dict(color='Correla√ß√£o'),
                        text_auto=True,
                        template='plotly_dark',
                        width=600, height=600)
        fig.update_layout(title_font_size=20)
        fig.update_traces(textfont_size=18)
        fig.update_xaxes(title=None, tickfont_size=18)
        fig.update_yaxes(title=None, tickfont_size=18)
        st.plotly_chart(fig, use_container_width=True)
        # else
    else:
        # control for selected features
        diff_cols = ['brent_diff', 'sp500_diff', 'exxon_diff', 'bp_diff']
        # checkbox
        selected_features = st.multiselect('‚öôÔ∏è Selecione as features:', 
                                        diff_cols, diff_cols)
        # plotar correla√ß√£o
        corr = df[selected_features].corr().round(2)
        fig = px.imshow(corr, color_continuous_scale='blues', 
                        title='Correla√ß√£o entre as vari√°veis',
                        labels=dict(color='Correla√ß√£o'),
                        text_auto=True,
                        template='plotly_dark',
                        width=600, height=600)
        fig.update_layout(title_font_size=20)
        fig.update_traces(textfont_size=18)
        fig.update_xaxes(title=None, tickfont_size=18)
        fig.update_yaxes(title=None, tickfont_size=18)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown('<br>', unsafe_allow_html=True)
    
    # insight
    create_insight('Correla√ß√£o',
                '''
                Ao considerar todo o per√≠odo dos dados, 
                a correla√ß√£o dos pre√ßos absolutos entre Brent e Exxon √© forte (85%), 
                j√° com as s√©ries diferenciadas passa a ser baixa (33%).
                Al√©m disso, note que nenhuma das correla√ß√µes apresentadas √© negativa.
                ''')
    
    st.markdown('<br><br>', unsafe_allow_html=True)
    
    # select one feature to plot with brent
    features_to_plot = ['exxon', 'sp500', 'bp']
    selected_feature = st.selectbox('‚öôÔ∏è Selecione a feature para plotar com Brent:', features_to_plot)
    # plotar gr√°fico
    fig = px.scatter(df, x='brent', y=selected_feature,
                    title=f'Petr√≥leo Brent x {selected_feature.title()}',
                    color=df.index.year,
                    color_continuous_scale='ice',
                    width=800, height=800,
                    template='plotly_dark')

    fig.update_layout(coloraxis_colorbar=dict(title='Ano'),
                    title_font_size=20)
    st.plotly_chart(fig, use_container_width=True)
    # divider    
    st.markdown('---')
    
    st.markdown('''
                <p style="font-size: 18px">
                Alguns indicadores utilizados para a <b>an√°lise t√©cnica</b> de ativos financeiros
                podem ser √∫teis para entender a tend√™ncia e volatilidade dos pre√ßos, como:
                </p>
                ''', unsafe_allow_html=True)

    # lista de indicadores
    st.markdown('''
                - **EMA**: Exponential Moving Average, ou M√©dia M√≥vel Exponencial,
                            com janelas de 14, 26, 200 dias.
                - **MACD**: Moving Average Convergence Divergence, ou Converg√™ncia e Diverg√™ncia de M√©dias M√≥veis,
                            com 12 dias para a m√©dia r√°pida, 26 dias para a m√©dia lenta e 9 dias para o sinal.
                - **RSI**: Relative Strength Index, ou √çndice de For√ßa Relativa, com janela de 14 dias.
                ''', unsafe_allow_html=True)
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''    
                !pip install pandas_ta             # instalar biblioteca
                import pandas_ta as ta             # importar biblioteca
                
                # fun√ß√£o
                def create_ta_indicators(df, column) -> pd.DataFrame:
        
                df[f'{column}_rsi'] = ta.rsi(df[column], length=14)
                df[f'{column}_macd'] = ta.macd(df[column], fast=12, slow=26, signal=9)[['MACD_12_26_9']]
                df[f'{column}_macd_signal'] = ta.macd(df[column], fast=12, slow=26, signal=9)[['MACDs_12_26_9']]
                df[f'{column}_macd_hist'] = ta.macd(df[column], fast=12, slow=26, signal=9)[['MACDh_12_26_9']]
                df[f'{column}_ema_14'] = ta.ema(df[column], length=14)
                df[f'{column}_ema_26'] = ta.ema(df[column], length=26)
                df[f'{column}_ema_200'] = ta.ema(df[column], length=200)
        
                # remover valores nulos
                df.dropna(inplace=True)
                
                return df
                
                # aplicar fun√ß√£o
                df = create_ta_indicators(df, 'brent')
                ''')

    # pular linha
    st.markdown('<br>', unsafe_allow_html=True)
    
    # selecione o indicador
    indicators = ['EMA', 'MACD', 'RSI']
    selected_indicator = st.selectbox('‚öôÔ∏è Selecione o indicador:', indicators)

    if selected_indicator == 'EMA':
        # renomear colunas para Pre√ßo Original, 14 dias, 26 dias e 200 dias
        ema_cols = ['brent', 'brent_ema_14', 'brent_ema_26', 'brent_ema_200']
        # plotar gr√°fico
        fig = px.line(df[ema_cols], title='EMA do Pre√ßo do Petr√≥leo Brent',
                        labels={'value': 'Pre√ßo (U$D )', 'date': 'Data'},
                        template='plotly_dark')
        fig.update_layout(title_font_size=20)
        fig.update_xaxes(title=None)
        fig.update_yaxes(range=[0, df['brent'].max() * 1.1])
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown('<br>', unsafe_allow_html=True)

        st.markdown('''
                    <p style="font-size: 18px">
                    EMA (<i>Exponential Moving Average</i>, ou M√©dia M√≥vel Exponencial)
                    √© um indicador de an√°lise t√©cnica que suaviza os pre√ßos e √© utilizado para 
                    identificar a dire√ß√£o da tend√™ncia. A EMA d√° um peso maior aos valores mais recentes, 
                    enquanto a M√©dia M√≥vel Simples (SMA) d√° o mesmo peso a todos os valores. 
                    A EMA de 14 dias √© mais sens√≠vel √†s mudan√ßas de pre√ßo, 
                    enquanto a EMA de 200 dias √© mais lenta e √© utilizada para identificar a tend√™ncia de longo prazo.
                    </p>
                    ''', unsafe_allow_html=True)

        st.latex(r'''
                EMA_{t} = \frac{P_{t}*k + EMA_{t-1}*(1-k)}{1}
                ''')

        st.markdown('''
                    Onde:<br>
                    t = per√≠odo de tempo recente<br>
                    P = pre√ßo do ativo<br>
                    k = calculado como 2/(n+1), onde n √© o n√∫mero de dias para suaviza√ß√£o<br>
                    ''', unsafe_allow_html=True)
    
    elif selected_indicator == 'MACD':
        # MACD
        fig = px.line(df, x=df.index, 
                  y=['brent_macd', 'brent_macd_signal', 'brent_macd_hist'],
                  title='MACD do Pre√ßo do Petr√≥leo Brent',
                  labels={'value': 'MACD'}, template='plotly_dark')
        fig.update_layout(title_font_size=20)
        fig.update_xaxes(title=None)
        fig.update_yaxes(range=[df['brent_macd'].min() * 1.1, df['brent_macd'].max() * 1.1])
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown('<br>', unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">
                    MACD (<i>Moving Average Convergence Divergence</i>, ou M√©dia M√≥vel Converg√™ncia/Diverg√™ncia),
                    √© um indicador que mostra a rela√ß√£o entre duas m√©dias m√≥veis de valores. 
                    A MACD √© calculada subtraindo a EMA de 26 dias da EMA de 12 dias. 
                    O sinal √© a EMA de 9 dias da MACD. O histograma √© a diferen√ßa entre a MACD e o sinal.
                    </p>
                    ''', unsafe_allow_html=True)
        
        st.latex(r'''
                MACD = EMA_{12} - EMA_{26}
                ''')
        st.latex(r'''
                Sinal = EMA_{9}(MACD_p)
                ''')
        st.latex(r'''
                Histograma = MACD - Sinal
                ''')
        
        st.markdown('''
                    Onde:<br>
                    MACD = M√©dia M√≥vel Converg√™ncia/Diverg√™ncia<br>
                    EMA = M√©dia M√≥vel Exponencial<br>
                    ''', unsafe_allow_html=True)

    else:
        # RSI
        fig = px.line(df, x=df.index, y='brent_rsi', 
                  title='RSI do Pre√ßo do Petr√≥leo Brent', 
                  labels={'value': 'RSI'}, template='plotly_dark')
        fig.add_hline(y=70, line_dash='dot', line_color='red', 
                      annotation_text='70', annotation_position='bottom right')
        fig.add_hline(y=30, line_dash='dot', line_color='green',
                        annotation_text='30', annotation_position='top right')
        fig.update_layout(title_font_size=20)
        fig.update_xaxes(title=None)
        fig.update_yaxes(range=[0, 100])
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown('<br>', unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">
                    RSI (<i>Relative Strength Index</i>, ou √çndice de For√ßa Relativa),  √© um indicador  
                    que mede a for√ßa e a velocidade das mudan√ßas no valor de um ativo. O RSI varia de 0 a 100 e √© normalmente 
                    usado para identificar condi√ß√µes de sobrecompra e sobrevenda. Um ativo √© considerado sobrecomprado 
                    quando o RSI est√° acima de 70 e sobrevendido quando est√° abaixo de 30.
                    </p>
                    ''', unsafe_allow_html=True)
        
        st.latex(r'''
                RSI = 100 - \frac{100}{1 + RS}
                ''')
        
        st.markdown('''
                    Onde:<br>
                    ''', unsafe_allow_html=True)
        
        st.latex(r'''
                RS = \frac{M√©dia_{ganhos}}{M√©dia_{perdas}}
                ''')

    
    st.markdown('<br>', unsafe_allow_html=True)
    # divider
    st.markdown('---')
    # texto
    st.markdown('''### Dataframe Final''')
    st.markdown('''
                Com isso, o dataframe completo pode ser visualizado abaixo:
                ''', unsafe_allow_html=True)
    # dataframe
    # controles para ordenar o dataframe: ascending or descending
    ascending = st.checkbox('√çndice decrescente', value=False)
    if ascending:
        df = df.sort_index(ascending=False)
    # mostrar dataframe
    st.dataframe(df)
    

elif page == page_2:
    # t√≠tulo
    st.title('Modelos de Previs√£o')
    # sele√ß√£o de modelo
    model = st.selectbox('Selecione o modelo:', ['XGBoost', 'Prophet'])
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    if model == 'XGBoost':
        # texto
        st.markdown('''
                    <p style="font-size: 18px">
                        O XGBoost, ou <i>Extreme Gradient Boosting</i>, √© um algoritmo de aprendizado de m√°quina supervisionado e baseado em √°rvores de decis√£o.
                        O modelo √© uma implementa√ß√£o otimizada do Gradient Boosting e pode ser utilizado para problemas de regress√£o e classifica√ß√£o. O XGBoost √© 
                        amplamente utilizado em competi√ß√µes de ci√™ncia de dados e √© conhecido por sua efici√™ncia e desempenho.
                        <br>
                    </p>
                    ''', unsafe_allow_html=True)
        
        with st.expander('üêç Exibir c√≥digo Python'):
            # c√≥digo
            st.code('''
                    # importar o XGBoost
                    !pip install xgboost                 # instalar biblioteca
                    import xgboost as xgb                # importar biblioteca
                    ''')
        
        # markdown
        st.markdown('''
                    <p style="font-size: 18px">
                        <br>
                        As colunas categ√≥ricas devem ser transformadas em vari√°veis num√©ricas antes de treinar o modelo.
                        Para isso, podemos utilizar a t√©cnica <i>One-Hot Encoding</i>.<br>
                    </p>
                    ''', unsafe_allow_html=True)
        
        # c√≥digo
        with st.expander('üêç Exibir c√≥digo Python'):
            st.code('''
                        # One-Hot Encoding
                        df = pd.get_dummies(df_baseline, 
                                columns=['month', 'year', 'weekday'],
                                drop_first=True)
                        
                        # caracteres min√∫sculos
                        df.columns = df.columns.str.lower()
                        
                        print(f'Quantidade de colunas: {df.shape[1]}')
                        ''')
        
        # divider
        st.markdown('---')
        
        # selecione o modelo
        model_type = st.radio('Selecione o modelo:', ['Baseline', 'Final'])
        if model_type == 'Baseline':
            # texto
            # prepara√ß√£o dos dados - t√≠tulo
            st.markdown('''#### Prepara√ß√£o dos dados''')
            st.markdown(r'''
                        <p style="font-size: 18px">
                        Para o modelo baseline, utilizamos 80% dos dados para treino e 20% para teste.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # baseline - divis√£o dos dados
                        X = df_baseline.drop(columns=['brent'])
                        y = df_baseline['brent']

                        # train test split
                        train_baseline_size = int(df_baseline.shape[0] * 0.8)

                        # 80% treino, 20% teste
                        X_train_baseline, X_test_baseline = X[:train_baseline_size], X[train_baseline_size:]
                        y_train_baseline, y_test_baseline = y[:train_baseline_size], y[train_baseline_size:]
                        ''')
                
            # gr√°fico com divis√£o dos dados
            baseline_xgb_df = pd.read_parquet(r'data/xgboost_baseline_train_test.parquet')
            fig = px.line(baseline_xgb_df, x='date', y='brent', 
                title='XGBoost Baseline - Treino e Teste', 
                color='set', 
                color_discrete_map={'train': '#4089FF', 
                                    'test': '#f6c409'},
                template='plotly_dark')
            # adicionar linha para divis√£o
            train_baseline_size = int(baseline_xgb_df.shape[0] * 0.8)
            fig.add_shape(type='line', 
                        x0=baseline_xgb_df.iloc[train_baseline_size]['date'],
                        y0=0, x1=baseline_xgb_df.iloc[train_baseline_size]['date'],
                        y1=baseline_xgb_df['brent'].max()*1.1,
                        line=dict(color='white', width=1, dash='dash'))
                            
            fig.update_layout(title_font_size=20)
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            st.plotly_chart(fig, use_container_width=True)
                
            st.markdown('''#### Treinamento do modelo''')
            # selecionar modelo baseline ou final - colocar isso para cima e mudar o c√≥digo
            # texto
            st.markdown('''<p style="font-size: 18px">
                        Com os dados preparados, podemos treinar o modelo XGBoost. 
                        Como vamos prever valores de pre√ßo, utilizamos a classe XGBRegressor. 
                        Para o treinamento do modelo baseline, n√£o utilizamos
                        colunas de indicadores t√©cnicos, como EMA, MACD e RSI.
                        </p>
                        ''', unsafe_allow_html=True)
            
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # Constru√ß√£o do modelo baseline
                        xgb_baseline = xgb.XGBRegressor(n_estimators=1000,                 # n√∫mero de √°rvores
                                                        max_depth=3,                       # profundidade m√°xima = 3 n√≠veis
                                                        booster='gbtree',                  # default
                                                        early_stopping_rounds=50,          # cessa ap√≥s 50 itera√ß√µes sem melhorar
                                                        objective='reg:squarederror' ,     # fun√ß√£o objetivo = erro quadr√°tico
                                                        learning_rate=0.01,               # taxa de aprendizado menor, para evitar o overfitting
                                                        random_state=19)                   # para reprodu√ß√£o

                        # Treinamento do modelo baseline
                        xgb_baseline.fit(X_train_baseline, y_train_baseline,
                                        eval_set=[(X_train_baseline, y_train_baseline),    # avalia√ß√£o no treino
                                                    (X_test_baseline, y_test_baseline)],   # avalia√ß√£o no teste
                                                    verbose=True)                          # exibir resultados durante o treino
                        ''')
                
            st.markdown('''<br>''', unsafe_allow_html=True)
                
            # import√¢ncia das features
            importance_baseline_df = pd.read_parquet(r'data/xgboost_baseline_importance.parquet')
            
            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                        Exxon Mobil, o √≠ndice SP500 e o ano de 2012 s√£o as features mais importantes no modelo baseline.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # code
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # Import√¢ncia das features
                        importance_baseline_df = pd.DataFrame({'feature': X_train_baseline.columns,
                                                                'importance': xgb_baseline.feature_importances_})
                        
                        # Ordenar
                        importance_baseline_df = importance_baseline_df.sort_values('importance', ascending=False)
                        ''')
            
            st.markdown('''<br>''', unsafe_allow_html=True)
            
            # plot
            fig = px.bar(importance_baseline_df, x='importance', y='feature',
                        title='10 Features mais importantes',
                        labels={'importance': 'Import√¢ncia', 'feature': 'Feature'},
                        template='plotly_dark')
            fig.update_layout(title_font_size=20)
            fig.update_xaxes(title=None, showgrid=True,
                             range=[0, importance_baseline_df['importance'].max() * 1.2])
            fig.update_yaxes(title=None)
            st.plotly_chart(fig, use_container_width=True)
            
            # realizar previs√µes
            st.markdown('''#### Previs√µes''')
            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                        Com o modelo treinado, podemos realizar previs√µes para o pre√ßo do petr√≥leo Brent.
                        </p>
                        ''', unsafe_allow_html=True)
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # previs√µes
                        y_pred_baseline = xgb_baseline.predict(X_test_baseline)
                        
                        # dataframe com previs√µes
                        predictions_baseline_df = pd.DataFrame({'date': X_test_baseline.index,
                                                                'brent': y_test_baseline,
                                                                'brent_pred': y_pred_baseline})
                        
                        ''')
            # plotar previs√µes
            baseline_xgb_pred_df = pd.read_parquet(r'data/xgboost_baseline_prediction.parquet')
            
            fig = px.line(baseline_xgb_pred_df, x='date', y=['brent', 'prediction'],
                title='XGBoost Baseline - Predi√ß√£o vs Real', 
                color_discrete_map={'brent': '#4089FF', 
                                    'prediction': '#e34592'},
                labels={'variable': 'vari√°vel', 'value': 'pre√ßo (U$D )'},
                template='plotly_dark')
            fig.update_layout(title_font_size=20)
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            st.plotly_chart(fig, use_container_width=True)
        
            # m√©tricas
            st.markdown('''#### Avalia√ß√£o do modelo''')
            st.markdown('''
                        <p style="font-size: 18px">
                        Para avaliar o modelo, utilizamos as m√©tricas RMSE, MAE e MAPE.<br>
                        </p>
                        ''', unsafe_allow_html=True)  
            # RMSE  
            st.markdown('''
                        - **RMSE** - *Root Mean Squared Error*, ou Raiz do Erro Quadr√°tico M√©dio:
                        ''')
            st.latex(r'''
                    RMSE = \sqrt{\frac{1}{n} \sum_{i=1}^{n} (y_{true} - y_{pred})^2}
                    ''')
            # MAE
            st.markdown('''
                        - **MAE** - *Mean Absolute Error*, ou Erro M√©dio Absoluto:
                        ''')
            st.latex(r'''
                    MAE = \frac{1}{n} \sum_{i=1}^{n} |y_{true} - y_{pred}|
                    ''')
            # MAPE
            st.markdown('''
                        - **MAPE** - *Mean Absolute Percentage Error*, ou Erro Percentual Absoluto M√©dio:
                        ''')
            st.latex(r'''
                    MAPE = \frac{1}{n} \sum_{i=1}^{n} \left| \frac{y_{true} - y_{pred}}{y_{true}} \right| \times 100
                    ''')
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # importar m√©tricas
                        from sklearn.metrics import mean_absolute_error, mean_squared_error
                        
                        # fun√ß√£o para calcular MAPE
                        def mean_absolute_percentage_error(y_true, y_pred) -> float:
                            return np.mean(np.abs((y_true - y_pred) / y_true)) * 100
                        
                        # m√©tricas
                        rmse_baseline = np.sqrt(mean_squared_error(y_test_baseline, y_pred_baseline))
                        mae_baseline = mean_absolute_error(y_test_baseline, y_pred_baseline)
                        mape_baseline = mean_absolute_percentage_error(y_test_baseline, y_pred_baseline)
                        
                        # print
                        print(f'RMSE: {rmse_baseline:.2f}')
                        print(f'MAE: {mae_baseline:.2f}')
                        print(f'MAPE: {mape_baseline:.2f}')
                        ''')
            
            st.markdown('<br>', unsafe_allow_html=True)
            
            # bot√£o para exibir scores
            if st.button('üìä Exibir Scores'):
                scores_baseline_df = pd.read_parquet(r'data/xgboost_baseline_scores.parquet')
                scores_baseline_df = scores_baseline_df.T
                scores_baseline_df.columns = scores_baseline_df.iloc[0]
                # drop first row
                scores_baseline_df = scores_baseline_df[1:]
                # mostrar dataframe
                st.dataframe(scores_baseline_df)
            
            st.markdown('<br>', unsafe_allow_html=True)
            
            baseline_metrics_text = r'''
                        A RMSE √© dada na mesma unidade de medida do dataset original e mostra que o modelo baseline est√° errando, em m√©dia, U$D 23.52.<br>
                        A MAE √© uma m√©trica absoluta e indica que as previs√µes do modelo est√£o desviando, em m√©dia, U$D 17.1 do valor real.<br>
                        A diferen√ßa entre RMSE e MAE √© que a primeira d√° mais peso para erros maiores, 
                        enquanto a segunda trata todos os erros de forma igual.<br>
                        A MAPE √© uma porcentagem e indica que as previs√µes do modelo est√£o desviando, em m√©dia, 22.96% do valor real.
                        '''
            create_analysis('Resultados do Modelo Baseline', baseline_metrics_text)
            
            st.markdown('<br>', unsafe_allow_html=True)

                
        else:
            # prepara√ß√£o dos dados - t√≠tulo
            st.markdown('''#### Prepara√ß√£o dos dados''')
            # texto
            st.markdown(r'''
                        <p style="font-size: 18px">
                        Para a divis√£o dos dados em treino e teste, a classe TimeSeriesSplit do Scikit-Learn se utiliza do 
                        m√©todo de valida√ß√£o cruzada (ou cross validation), que segmenta os dados de treino em K grupos 
                        (chamados <i>folds</i>), consecutivos e ordenados. Em seguida, treina o modelo em etapas, a partir 
                        de um pequeno conjunto inicial, que se expande com mais dados de treino - em dire√ß√£o ao futuro. 
                        Se K √© igual a 5, por exemplo, o modelo √© treinado 5 vezes, com volume incremental de dados, onde  
                        cada nova dobra incorpora os dados da dobra anterior e expande o conjunto de treino. 
                        Ap√≥s cada treinamento, o modelo executa previs√µes, a serem avaliadas pela m√©trica escolhida pelo usu√°rio.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # modelo final - divis√£o dos dados
                        X = df.drop(columns=['brent'])
                        y = df['brent']
                        
                        # time series split
                        tscv = TimeSeriesSplit(n_splits=5)
                        
                        # iterar sobre as divis√µes
                        for train_index, test_index in tscv.split(X):
                            X_train, X_test = X.iloc[train_index], X.iloc[test_index]
                            y_train, y_test = y.iloc[train_index], y.iloc[test_index]
                        ''')
                
            # gr√°fico com divis√£o dos dados
            df = pd.read_parquet(r'data/data_w_indicators.parquet')
            X = df.drop(columns=['brent'])
            y = df['brent']
            # time series split
            tscv = TimeSeriesSplit(n_splits=5)
            # iterar sobre as divis√µes
            i = 1
            for train_index, test_index in tscv.split(X):
                X_train, X_test = X.iloc[train_index], X.iloc[test_index]
                y_train, y_test = y.iloc[train_index], y.iloc[test_index]
                # dataframe com divis√µes
                df_split = df.iloc[test_index]
                df_split['set'] = f'set_{i}'
                if i == 1:
                    df_final = df_split
                else:
                    df_final = pd.concat([df_final, df_split])
                i += 1
            # plotar gr√°fico
            fig = px.line(df_final, x=df_final.index, y='brent',
                        title='XGBoost Final - Divis√£o dos Dados',
                        color='set', 
                        template='plotly_dark')
            fig.update_layout(title_font_size=20)
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            st.plotly_chart(fig, use_container_width=True)
            
            st.markdown('''#### Treinamento do modelo''')
            # texto
            st.markdown('''<p style="font-size: 18px">
                        A melhor escolha pode ser encontrada atrav√©s da t√©cnica Grid Search, 
                        que itera sobre as op√ß√µes listadas pelo usu√°rio e treina modelos √∫nicos, 
                        gerados a partir da combina√ß√£o de todos os par√¢metros. 
                        Vale ressaltar que, quanto mais op√ß√µes s√£o fornecidas, mais tempo ser√° consumido na execu√ß√£o.
                        ''', unsafe_allow_html=True)
            
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # Importar Grid Search
                        from sklearn.model_selection import GridSearchCV
                                                
                        # Converter X e y para numpy arrays
                        X = np.array(X)
                        y = np.array(y)
                        
                        # Grid Search
                        params = {'n_estimators': [100, 500, 1000, 2000],
                                  'max_depth': [3, 5, 7, 9],
                                  'learning_rate': [0.001, 0.01, 0.1]
                        
                        xgb_final = xgb.XGBRegressor(objective='reg:squarederror', 
                                                     random_state=19)
                        
                        grid_search = GridSearchCV(estimator=xgb_final, 
                                                param_grid=params, 
                                                scoring='neg_mean_squared_error', 
                                                cv=tscv, 
                                                verbose=1)
                        
                        grid_search.fit(X, y)
                        
                        # Melhores par√¢metros
                        best_params = grid_search.best_params_
                        # Melhor modelo
                        best_model = grid_search.best_estimator_
                        # Melhor score
                        best_score = grid_search.best_score_
                        
                        # Criar dataframe com resultados
                        results_df = pd.DataFrame(grid_search.cv_results_)
                        results_df = results_df.sort_values(by='rank_test_score')
                        ''')
            # plotar import√¢ncia das features
            # import√¢ncia das features
            importance_final_df = pd.read_parquet(r'data/xgboost_best_importance.parquet')
            # plot
            fig = px.bar(importance_final_df, x='importance', y='feature',
                        title='10 Features mais importantes',
                        labels={'importance': 'Import√¢ncia', 'feature': 'Feature'},
                        template='plotly_dark')
            fig.update_layout(title_font_size=20)
            fig.update_xaxes(title=None, showgrid=True,
                             range=[0, importance_final_df['importance'].max() * 1.2])
            fig.update_yaxes(title=None)
            st.plotly_chart(fig, use_container_width=True)
            
            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                        Os anos de 2012, 2011 e 2013 s√£o as features mais importantes para o modelo final.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # resultados
            st.markdown('''<br>''', unsafe_allow_html=True)
            st.markdown('''#### Avalia√ß√£o do modelo''')
            st.markdown('''
                        <p style="font-size: 18px">
                        Com isso, treinamos 48 modelos e o melhor foi obtido com os par√¢metros:<br>
                        - <b>n_estimators</b>: 1000<br>
                        - <b>max_depth</b>: 3<br>
                        - <b>learning_rate</b>: 0.1<br>
                        </p>
                        ''', unsafe_allow_html=True)
            # previs√µes
            st.markdown('''#### Previs√µes''')
            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                        Com o modelo treinado, realizamos previs√µes para o pre√ßo do petr√≥leo Brent.
                        </p>
                        ''', unsafe_allow_html=True)
            # plotar
            final_xgb_pred_df = pd.read_parquet(r'data/xgboost_best_prediction.parquet')
            fig = px.line(final_xgb_pred_df, x='date', y=['brent', 'prediction'],
                title='XGBoost Final - Predi√ß√£o vs Real', 
                color_discrete_map={'brent': '#4089FF', 
                                    'prediction': '#e34592'},
                labels={'variable': 'vari√°vel', 'value': 'pre√ßo (U$D )'},
                template='plotly_dark')
            fig.update_layout(title_font_size=20)
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            st.plotly_chart(fig, use_container_width=True)
            
            # m√©tricas
            st.markdown('''#### Avalia√ß√£o do modelo''')
            st.markdown('''
                        <p style="font-size: 18px">
                        Para avaliar o modelo, utilizamos as m√©tricas:<br>
                        </p>
                        ''', unsafe_allow_html=True)
            # RMSE
            st.markdown('''
                        - **RMSE** - *Root Mean Squared Error*, ou Raiz do Erro Quadr√°tico M√©dio:
                        ''')
            st.latex(r'''
                    RMSE = \sqrt{\frac{1}{n} \sum_{i=1}^{n} (y_{true} - y_{pred})^2}
                    ''')
            # MAE
            st.markdown('''
                        - **MAE** - *Mean Absolute Error*, ou Erro M√©dio Absoluto:
                        ''')
            st.latex(r'''
                    MAE = \frac{1}{n} \sum_{i=1}^{n} |y_{true} - y_{pred}|
                    ''')
            # MAPE
            st.markdown('''
                        - **MAPE** - *Mean Absolute Percentage Error*, ou Erro Percentual Absoluto M√©dio:
                        ''')
            st.latex(r'''
                    MAPE = \frac{1}{n} \sum_{i=1}^{n} \left| \frac{y_{true} - y_{pred}}{y_{true}} \right| \times 100
                    ''')
            
            st.markdown('<br>', unsafe_allow_html=True)
            
            # bot√£o para exibir scores
            if st.button('üìä Exibir Scores'):
                scores_best_df = pd.read_parquet(r'data/xgboost_best_scores.parquet')
                scores_best_df = scores_best_df.iloc[[-1]]
                scores_best_df = scores_best_df.T
                scores_best_df.columns = scores_best_df.iloc[0]
                scores_best_df = scores_best_df[1:]
                scores_best_df = scores_best_df.rename(columns={'XGBoost Best5': 'XGBoost Best'})
                # mostrar dataframe
                st.dataframe(scores_best_df)
            
            st.markdown('<br>', unsafe_allow_html=True)
            
            create_analysis('Resultados do Modelo Final', 
                            r'''
                                Em compara√ß√£o com modelo baseline, houve melhora consider√°vel nas m√©tricas de avalia√ß√£o:<br>
                                A RMSE melhorou em 38.08%, a MAE melhorou em 37.51% e a MAPE melhorou em 38.5%
                             ''')
            
            st.markdown('<br>', unsafe_allow_html=True)
            
    else:
        # modelo Prophet
        # texto
        st.markdown('''
                    <p style="font-size: 18px">
                    O Prophet, criado pelo Facebook em 2008 sob autoria dos cientistas de dados Sean J. Taylor e Ben Letham, 
                    √© uma biblioteca open-source baseada em modelos decompon√≠veis de s√©ries temporais. 
                    A ferramenta lida bem com dados ausentes e outliers, e foi projetada para ser f√°cil de usar. 
                    O Prophet usa 3 componentes principais para a decomposi√ß√£o: tend√™ncia (<i>trend</i>), 
                    sazonalidade (<i>seasonality</i>) e feriados (<i>holidays</i>). 
                    Assim, pode ser expressado atrav√©s da equa√ß√£o:
                    </p>
                    ''', unsafe_allow_html=True)
        
        st.latex(r'''
                    y(t) = g(t) + s(t) + h(t) + e(t)
                  ''')
        
        # text
        st.markdown('''
                    Em que:
                    - Growth g(t): representa a curva de crescimento linear ou log√≠stica, para modelar mudan√ßas n√£o peri√≥dicas em s√©ries temporais. Por padr√£o, o Prophet usa o modelo de crescimento linear para as previs√µes.
                    - Seasonality s(t): a s√©rie de Fourier √© usada para modelar efeitos sazonais ou mudan√ßas peri√≥dicas (por exemplo: o ciclo semanal, mensal e anual). Para aprender e prever tais efeitos, o Prophet depende da s√©rie de Fourier para fornecer um modelo flex√≠vel.
                    - Feriados e eventos h(t): o Prophet considera o efeito de feriados e permite adicionar os par√¢metro supper_window e lower_window, que estendem os efeitos dos feriados em torno de suas datas.
                    - Termo de erro e(t): o termo de erro leva em conta quaisquer mudan√ßas incomuns n√£o acomodadas pelo modelo.
                    ''')
        
        # c√≥digo
        with st.expander('üêç Exibir c√≥digo Python'):
            st.code('''
                    # importar o Prophet
                    !pip install prophet                 # instalar biblioteca
                    from prophet import Prophet          # importar biblioteca
                    ''')
        
        st.markdown('<br>', unsafe_allow_html=True)
        
        # markdown
        st.markdown('''
                    <p style="font-size: 18px">
                    Para utilizar o Prophet, √© necess√°rio criar um dataframe com duas colunas: ds (data) e y (valor).
                    Em seguida, instanciamos o modelo Prophet, ajustamos os dados de treino e realizamos previs√µes.
                    </p>
                    ''', unsafe_allow_html=True)
        
        # c√≥digo
        with st.expander('üêç Exibir c√≥digo Python'):
            st.code('''
                    # criar dataframe
                    df_prophet = df[['date', 'brent']].copy()
                    df_prophet.columns = ['ds', 'y']
                    ''')
        
        # divider
        st.markdown('---')   
        
        # selecione o modelo
        model_type = st.radio('Selecione o modelo:', ['Baseline', 'Final'])
        if model_type == 'Baseline':
            # prepara√ß√£o dos dados - t√≠tulo
            st.markdown('''#### Prepara√ß√£o dos dados''')
            # texto
            st.markdown(r'''
                        <p style="font-size: 18px">
                        Para o modelo baseline, utilizaremos as colunas sp500, exxon e bp como regressores. Al√©m disso,
                        utilizaremos 80% dos dados para treino e 20% para teste.
                        </p>
                        ''', unsafe_allow_html=True)

            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # baseline - divis√£o dos dados
                        baseline_train_size = int(len(df_baseline) * 0.8)

                        baseline_train = df_baseline.iloc[:baseline_train_size].copy()
                        baseline_test = df_baseline.iloc[baseline_train_size:].copy()
                        ''')
            
            # gr√°fico com divis√£o dos dados
            prophet_baseline_train_df = pd.read_parquet(r'data/prophet_baseline_train.parquet')
            prophet_baseline_test_df = pd.read_parquet(r'data/prophet_baseline_test.parquet')
            
            fig = go.Figure()
            fig.add_trace(go.Scatter
                        (x=prophet_baseline_train_df['ds'], y=prophet_baseline_train_df['y'],
                        mode='lines', name='Treino', line=dict(color='#4089FF')))
            fig.add_trace(go.Scatter
                        (x=prophet_baseline_test_df['ds'], y=prophet_baseline_test_df['y'],
                        mode='lines', name='Teste', line=dict(color='#f6c409')))
            fig.update_layout(title='Prophet Baseline - Treino e Teste',
                            title_font_size=20, template='plotly_dark')
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            st.plotly_chart(fig, use_container_width=True)
            
            # markdown
            st.markdown('''#### Treinamento do modelo''')
            # texto
            st.markdown('''<p style="font-size: 18px">
                        Com os dados preparados, podemos treinar o modelo Prophet.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # Instanciar o modelo Prophet
                        baseline_model = Prophet()     # par√¢metros default
                        
                        # Ajustar o modelo
                        baseline_model.fit(baseline_train)
                        ''')
            
            # previs√µes
            st.markdown('''#### Previs√µes''')
            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                        Com o modelo treinado, realizamos previs√µes para o pre√ßo do petr√≥leo Brent.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        from prophet.make_future_dataframe import make_future_dataframe
                        
                        # Criar dataframe futuro
                        future_baseline = baseline_model.make_future_dataframe(periods=len(baseline_test),
                                                                                freq='B')     # dias √∫teis
                        
                        # Realizar previs√µes
                        forecast_baseline = baseline_model.predict(future_baseline)
                        ''')
                
            # previs√µes
            prophet_baseline_forecast_df = pd.read_parquet(r'data/prophet_baseline_forecast.parquet')
            # carregar modelo baseline com pickle
            with open(r'models/prophet_baseline_model.pkl', 'rb') as file:
                prophet_baseline = pickle.load(file)
            
            fig = plot_plotly(prophet_baseline, prophet_baseline_forecast_df)
            fig.update_layout(title='Prophet Baseline - Predi√ß√£o vs. Real', title_font_size=20)
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            # scatter to blue
            fig.for_each_trace(lambda t: t.update(marker=dict(color='#4089FF')))
            # line to pink
            fig.for_each_trace(lambda t: t.update(line=dict(color='#e34592')))
            st.plotly_chart(fig, use_container_width=True)
            
            # avalia√ß√£o com cross-validation
            st.markdown('''#### Avalia√ß√£o do modelo''')
            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                        Para avaliar o modelo, utilizamos a t√©cnica de valida√ß√£o cruzada (cross-validation).
                        O Prophet possui uma fun√ß√£o interna para realizar a valida√ß√£o cruzada, que divide os dados em
                        janelas temporais e treina o modelo em cada uma delas.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        from prophet.diagnostics import cross_validation
                        from prophet.diagnostics import performance_metrics
                        
                        # Realizar cross-validation
                        cv_baseline = cross_validation(baseline_model,
                                                        initial='200 days',
                                                        period='60 days',
                                                        horizon='30 days')
                        
                        # M√©tricas
                        metrics_baseline = performance_metrics(cv_baseline)
                        ''')
            
            # bot√£o para exibir scores
            if st.button('üìä Exibir Scores'):
                # dataframe com scores
                prophet_baseline_dict = {'Horizonte': '3 dias',
                                        'RMSE': 15.2261,
                                        'MAE': 8.9039,
                                        'MAPE': 0.1953}
                st.write(prophet_baseline_dict)
            
            st.markdown('<br>', unsafe_allow_html=True)
            
            prophet_metrics_text = r'''
                        Para um horizonte de previs√£o de 3 dias, o modelo atingiu<br> 
                        RMSE de 15.22, MAE de 8.90 e MAPE de 19.53%.
                        '''
            
            create_analysis('Resultados do Modelo Baseline', prophet_metrics_text)
            
            st.markdown('<br>', unsafe_allow_html=True)
            
        else:
            # prepara√ß√£o dos dados - t√≠tulo
            st.markdown('''#### Prepara√ß√£o dos dados''')
            # texto
            st.markdown(r'''
                        <p style="font-size: 18px">
                        Para o modelo final, utilizaremos todas as colunas do dataset como regressores. Al√©m disso,
                        utilizaremos a fun√ß√£o Grid Search para encontrar os melhores par√¢metros para o modelo.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # final - divis√£o dos dados
                        final_train_size = int(len(df_final) * 0.8)

                        final_train = df_final.iloc[:final_train_size].copy()
                        final_test = df_final.iloc[final_train_size:].copy()
                        ''')
            
            # gr√°fico com divis√£o dos dados
            prophet_final_train_df = pd.read_parquet(r'data/prophet_final_train.parquet')
            prophet_final_test_df = pd.read_parquet(r'data/prophet_final_test.parquet')
            
            fig = go.Figure()
            fig.add_trace(go.Scatter
                        (x=prophet_final_train_df['ds'], y=prophet_final_train_df['y'],
                        mode='lines', name='Treino', line=dict(color='#4089FF')))
            fig.add_trace(go.Scatter
                        (x=prophet_final_test_df['ds'], y=prophet_final_test_df['y'],
                        mode='lines', name='Teste', line=dict(color='#f6c409')))
            fig.update_layout(title='Prophet Final - Treino e Teste',
                            title_font_size=20, template='plotly_dark')
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            st.plotly_chart(fig, use_container_width=True)
            
            # markdown
            st.markdown('''#### Treinar o modelo''')
            # texto
            st.markdown('''<p style="font-size: 18px">
                        Com os dados preparados, podemos criar a lista de par√¢metros e realizar a busca dos melhores par√¢metros, 
                        com base na m√©trica MAPE.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        import itertools
                        from prophet.make_holidays import make_holidays
                        
                        # Criar lista de par√¢metros
                        param_grid = {
                                        'changepoint_prior_scale': np.linspace(0.001, 0.5, 3),
                                        'seasonality_prior_scale': np.linspace(0.01, 10, 3),
                                        'holidays_prior_scale': [0.1, 10],
                                     }
                        
                        # Combinar par√¢metros
                        all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]
                        
                        results = []
                        periods=252
                        
                        # Iterar sobre os par√¢metros
                        for i, params in enumerate(all_params):
                            # Instanciar o modelo
                            model = Prophet(**params)
                            
                            # Adicionar regressores
                            for regressor in regressors.columns:
                                model.add_regressor(regressor)
                                
                            # Adicionar feriados
                            model.add_country_holidays(country_name='US')
                            
                            # Ajustar o modelo
                            model.fit(train)
                            
                            # Criar dataframe futuro
                            future = model.make_future_dataframe(periods=periods, 
                                                                freq='B', 
                                                                include_history=True)
                                                                
                            # Adicionar regressores
                            for regressor in regressors.columns:
                                future[regressor] = df[regressor]
                                
                            # Realizar previs√µes
                            forecast = model.predict(future)
                            
                            # predictions
                            predictions = forecast[['ds', 'yhat']].tail(periods)
                            # calculate the error
                            error = mape(df['y'], forecast['yhat'])
                            # append the results
                            results.append([params, error])
                            
                        results = pd.DataFrame(results, columns=['params', 'mape'])
                        results = results.sort_values('mape', ascending=True)
                        
                        best_params = results.iloc[0, 0]
                        ''')
                
            # markdown
            st.markdown('''
                        <p style="font-size: 18px"><br>
                        O melhor modelo, com MAPE de 12.13%, foi obtido com os seguintes par√¢metros:<br>
                        - <b>changepoint_prior_scale</b>: 0.5<br>
                        - <b>seasonality_prior_scale</b>: 0.01<br>
                        - <b>holidays_prior_scale</b>: 0.01
                        </p>
                        ''', unsafe_allow_html=True)
            
            # markdown
            st.markdown('''#### Avalia√ß√£o do modelo''')
            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                        Agora, modelos treinar o melhor modelo e realizar previs√µes.
                        Com isso, podemos avaliar o modelo com a valida√ß√£o cruzada.
                        </p>
                        ''', unsafe_allow_html=True)
            
            # c√≥digo
            with st.expander('üêç Exibir c√≥digo Python'):
                st.code('''
                        # Instanciar o modelo
                        best_model = Prophet(**best_params)
                        
                        # Adicionar regressores
                        for regressor in regressors.columns:
                            final_model.add_regressor(regressor)
                        
                        # Adicionar feriados
                        final_model.add_country_holidays(country_name='US')
                        
                        # Ajustar o modelo
                        final_model.fit(final_train)
                        
                        # Realizar cross-validation
                        cv_final = cross_validation(final_model,
                                                    initial='200 days',
                                                    period='60 days',
                                                    horizon='30 days')
                        
                        # M√©tricas
                        metrics_final = performance_metrics(cv_final)
                        ''')
            
            # plotar
            prophet_final_forecast_df = pd.read_parquet(r'data/prophet_final_forecast.parquet')
            # carregar modelo final com pickle
            with open(r'models/prophet_final_model.pkl', 'rb') as file:
                prophet_final = pickle.load(file)
                
            fig = plot_plotly(prophet_final, prophet_final_forecast_df)
            fig.update_layout(title='Prophet Final - Predi√ß√£o vs. Real', title_font_size=20)
            fig.update_xaxes(title=None)
            fig.update_yaxes(title='Pre√ßo (U$D )')
            # scatter to blue
            fig.for_each_trace(lambda t: t.update(marker=dict(color='#4089FF')))
            # line to pink
            fig.for_each_trace(lambda t: t.update(line=dict(color='#e34592')))
            st.plotly_chart(fig, use_container_width=True)
            
            # bot√£o para exibir scores
            if st.button('üìä Exibir Scores'):
                # dataframe com scores
                prophet_final_dict = {'Horizonte': '3 dias',
                                      'RMSE': 10.7325,
                                      'MAE': 6.1403,
                                      'MAPE': 0.1211}
                st.write(prophet_final_dict)

            st.markdown('<br>', unsafe_allow_html=True)
            
            prophet_metrics_text = r'''
                        Para um horizonte de previs√£o de 3 dias, o modelo atingiu<br>
                        RMSE de 10.73, MAE de 6.14 e MAPE de 12.11%.<br>
                        Em compara√ß√£o com o modelo baseline, houve melhora de<br>15.22% sobre a m√©trica RMSE, 8.9% sobre a MAE e 
                        37.97% sobre a MAPE.
                        '''

            create_analysis('Resultados do Modelo Final', prophet_metrics_text)

# conclus√£o
elif page == page_3:
    # t√≠tulo
    st.title('Conclus√£o')
    # separador
    st.markdown('<br>', unsafe_allow_html=True)
    # texto
    st.markdown('''
                <p style="font-size: 20px">
                    Neste projeto, foram treinados dois modelos para prever o pre√ßo do petr√≥leo Brent: XGBoost e Prophet.
                    <br><br>
                    O modelo XGBoost obteve <b>RMSE de 15.89</b>, <b>MAE de 12.31</b> e <b>MAPE de 16.06%</b>, 
                    o modelo Prophet obteve <b>RMSE de 10.73</b>, <b>MAE de 6.14</b> e <b>MAPE de 12.11%</b>. 
                    Com base nas configura√ß√µes atuais, o modelo Prophet obteve melhores m√©tricas de avalia√ß√£o.
                    <br>
                </p>
                ''', unsafe_allow_html=True)

    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('---')
    
    # pr√≥ximos passos
    st.markdown('''## Principais Insights''')
    
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    Os principais <i>insights</i> e respectivas etapas de melhorias ao projeto,
                    obtidos durante os processos de an√°lise dos dados e constru√ß√£o dos modelos, s√£o retratados a seguir:
                    <br>
                </p>
                ''', unsafe_allow_html=True) 
                
    # melhoria do modelo XGBoost
    st.markdown('''#### Melhoria do Modelo XGBoost''')
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    - <b>Pr√≥ximo passo:</b> utilizar outros modelos para que o XGBoost possa extrapolar previs√µes para 
                      al√©m dos limites dos dados de treinamento.
                <br>
                </p>
                ''', unsafe_allow_html=True)    
    
    create_insight(
                    'Extrapola√ß√£o de Dados na Previs√£o',
                    '''
                        O modelo XGBoost, assim como quaisquer algoritmos baseados em √°rvore, 
                        possui uma desvantagem para tarefas de regress√£o: suas predi√ß√µes respeitar√£o os 
                        limites dos dados utilizados no treinamento. Ou seja, existe dificuldade em <b>extrapolar</b> os 
                        valores m√°ximo e m√≠nimo do intervalo de dados de treinamento. Por isso, se faz interessante 
                        combinar esse modelo a outros, como modelos lineares ou mesmo Redes Neurais Recorrentes, 
                        como <i>Long Short-Term Memory</i> (LSTM).
                    '''
                    )

    st.markdown('<br>', unsafe_allow_html=True)

    # t√≠tulo
    st.markdown('''#### Modelos de *Ensemble Learning*''')
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    O pre√ßo do petr√≥leo √© influenciado por diversos fatores, como oferta e demanda.
                    Al√©m disso, eventos globais, como guerras e desastres naturais, tamb√©m podem afet√°-lo.
                    Logo, essa s√©rie temporal n√£o √© estacion√°ria e possui comportamento n√£o linear. Fatos inesperados, 
                    como os apresentados na se√ß√£o "An√°lise", n√£o s√£o facilmente capturados por um √∫nico modelo.<br><br>
                    - <b>Pr√≥ximo passo:</b> empregar a t√©cnica de <i>ensemble learning</i> para combinar modelos.
                    <br>
                </p>
                ''', unsafe_allow_html=True)
    
    # criar insight
    create_insight('Complexidade do Pre√ßo do Petr√≥leo', 
                   '''
                        Sugere-se a utiliza√ß√£o de <i>ensemble learning</i> para combinar modelos de previs√£o.
                        Esses modelos n√£o precisam se voltar apenas ao pre√ßo do petr√≥leo, mas tamb√©m a outros fatores fundamentais - como produ√ß√£o e mercado.<br>
                        Um modelo de classifica√ß√£o para prever "alta" ou "baixa" do pre√ßo do petr√≥leo pode compor uma <i>feature</i> adicional.<br>
                        Redes Neurais Convolucionais, ou <i>Convolutional Neural Networks</i> (CNN) s√£o eficazes para an√°lise de imagens de sat√©lite e previs√£o de eventos clim√°ticos.
                        CNNs tamb√©m podem ser usadas para previs√£o, a partir de gr√°ficos de <i>candlestick</i>, utilizados por <i>traders</i> para an√°lise t√©cnica.
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('''#### An√°lise de Sentimentos & Mercado Futuro''')

    st.markdown('''
                <p style="font-size: 18px">
                    A an√°lise de sentimentos √© uma t√©cnica de Processamento de Linguagem Natural,
                    ou <i>Natural Language Processing</i> (NLP), que visa identificar e classificar a polaridade 
                    emocional de um texto. Ela utiliza algoritmos e modelos de aprendizado de m√°quina para 
                    atribuir uma pontua√ß√£o de sentimento a cada trecho, indicando se √© positivo, negativo ou neutro.
                    Para melhoria do modelo, um passo importante √© a constru√ß√£o de uma <i>feature</i> que 
                    capture a opini√£o p√∫blica sobre o mercado de petr√≥leo em tempo real, a partir de not√≠cias e redes sociais. 
                    Implementar esses sentimentos no modelo ajuda a incorporar tend√™ncias emergentes e 
                    mudan√ßas de humor que n√£o seriam capturadas apenas por dados hist√≥ricos de pre√ßos.<br><br>
                    - <b>Pr√≥ximo passo:</b> integrar o modelo com outras fontes de dados sobre o mercado de futuro.
                    <br>
                </p>
                ''', unsafe_allow_html=True)

    create_insight('Mercado Futuro & An√°lise de Sentimento', 
                     '''
                        A an√°lise de sentimento tamb√©m contribui para a estabilidade das previs√µes, 
                        conforme medido pelo EV (<i>Error Variance</i>, ou Vari√¢ncia do Erro). A adi√ß√£o de sentimentos extra√≠dos por textos 
                        tende a estabilizar os resultados, reduzindo a variabilidade das previs√µes e tornando-as mais confi√°veis.<br>
                        Al√©m disso, criar features baseadas em contratos futuros de petr√≥leo e ajudar√° a 
                        entender dados de extra√ß√£o e estoque. Tamb√©m, o volume de transa√ß√µes no mercado de futuro √© componente essencial para o c√°lculo 
                        de outros indicadores t√©cnicos, como o <i>Open Interest</i>, que mede o n√∫mero de contratos em aberto.
                      ''')
    
    st.markdown('<br>', unsafe_allow_html=True)    
    
    # t√≠tulo
    st.markdown('''#### Database na Nuvem''')
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    MLOps √© uma pr√°tica que visa integrar o desenvolvimento de modelos de Machine Learning 
                    com a opera√ß√£o de sistemas. Para essa etapa, √© importante criar um pipeline de dados.<br><br>
                    - <b>Pr√≥ximo passo:</b> <i>deploy</i> da aplica√ß√£o na nuvem, com a Amazon Web Services (AWS).<br>
                        * <b>Amazon S3</b> para armazenamento do modelo<br>
                        * <b>Amazon Redshift</b> para armazenamento dos dados estruturados<br>
                        * <b>Amazon Glue</b> para ETL - <i>Extract Transform Load</i><br>
                        * <b>Amazon SageMaker</b> para treinamento de modelos de Machine Learning<br>
                </p>
                ''', unsafe_allow_html=True)

    # criar insight
    create_insight(
                    'Vantagens de um Database na Nuvem',
                   '''
                        - Escalabilidade: aumenta ou diminui a capacidade de armazenamento conforme a demanda.<br>
                        - Seguran√ßa: os dados s√£o armazenados em servidores seguros e protegidos por criptografia.<br>
                        - Acessibilidade: os dados podem ser acessados de qualquer lugar e a qualquer momento.<br>
                        - Backup: salvamento autom√°tico de dados, que podem ser recuperados em caso de falhas.<br>
                        - Integra√ß√£o: integra√ß√£o com outras ferramentas, como pipelines de dados e APIs.
                        '''
                     )
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('''#### Desenvolver API''')

    st.markdown('''<p style="font-size: 18px">
                API, ou <i>Application Programming Interface</i>, √© um conjunto de regras e protocolos que 
                permitem a comunica√ß√£o entre sistemas.<br><br>
                - <b>Pr√≥ximo passo:</b> criar API para disponibilizar o modelo para usu√°rios e outras aplica√ß√µes.
                <br>
                </p>
                ''', unsafe_allow_html=True)
                        
    # criar insight
    create_insight('API', 
                   '''
                        - Facilita o acesso √†s previs√µes do modelo, permitindo que outras aplica√ß√µes e sistemas consumam os dados.<br>
                        - Pode ser utilizada para criar dashboards, relat√≥rios e aplica√ß√µes web que consomem as previs√µes do modelo.<br>
                        - Permite integra√ß√£o com outros sistemas, como CRMs (<i>Customer Relationship Management</i>) e 
                          ERPs (<i>Enterprise Resource Planning).
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    
# refer√™ncias        
else:
    st.title('Refer√™ncias')
    st.markdown('<br>', unsafe_allow_html=True)
    # subt√≠tulo
    st.header('Fontes de dados')
    st.markdown('''
                <p style="font-size: 18px">
                    Os dados utilizados neste projeto foram obtidos a partir das fontes listadas abaixo:
                </p>
                ''', unsafe_allow_html=True)
    
    # lista de fontes de dados
    st.markdown('''
                #### [**IPEA**](http://www.ipeadata.gov.br/Default.aspx) - Instituto de Pesquisa Econ√¥mica Aplicada
                Portal de dados econ√¥micos do governo brasileiro, disponibiliza dados de diversos indicadores econ√¥micos, 
                como infla√ß√£o, PIB, taxa de juros, c√¢mbio e pre√ßos de *commodities*. As s√©ries temporais podem ser baixadas 
                em formato `.csv`. O IPEA tamb√©m permite acesso atrav√©s de requisi√ß√µes `HTTP` por meio de API.
                ''')
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                # acessar dados do IPEA
                
                !pip install ipeadatapy                 # instalar biblioteca
                import ipeadatapy as ipea               # importar biblioteca
                
                #ipea.list_series()                     # lista de s√©ries dispon√≠veis
                
                df = ip.timeseries(ipea_table_code)     # obter dados do petr√≥leo Brent
                ''')
    
    st.markdown('''
                #### [**FRED**](https://fred.stlouisfed.org/series/DCOILBRENTEU) - Federal Reserve Economic Data
                Banco de dados econ√¥micos mantido pelo Federal Reserve Bank of St. Louis, nos EUA. 
                Ele cont√©m uma vasta quantidade de dados econ√¥micos, incluindo s√©ries temporais de pre√ßos de *commodities*, 
                como o [**petr√≥leo Brent**](https://fred.stlouisfed.org/series/DCOILBRENTEU).
                Os dados podem ser baixados em formato `.csv`. O FRED disponibiliza tamb√©m permite acesso atrav√©s de requisi√ß√µes `HTTP` por meio de API.
                ''')

    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                    # acessar dados do FRED
                    
                    !pip install pandas_datareader            # instalar biblioteca
                    import pandas_datareader as pdr           # importar biblioteca
                    
                    df = pdr.get_data_fred('DCOILBRENTEU')    # obter dados do petr√≥leo Brent
                ''')

    st.markdown('''
                #### [**Yahoo Finance**](https://finance.yahoo.com/quote/CL=F?p=CL=F) - Yahoo Finance
                Plataforma de not√≠cias e dados financeiros, permite acessar cota√ß√µes de ativos, √≠ndices 
                e pre√ßos de *commodities*. Os dados podem ser baixados em formato `.csv` e tamb√©m acessados por meio de API.
                A biblioteca [`yfinance`](https://pypi.org/project/yfinance/) permite acessar os dados do Yahoo Finance diretamente no Python:
                ''')
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                    # acessar dados do Yahoo Finance
                    
                    !pip install yfinance            # instalar biblioteca
                    import yfinance as yf            # importar biblioteca
                    
                    df = yf.download('BZ=F')         # obter dados do petr√≥leo Brent
                ''')

    st.markdown('<br>', unsafe_allow_html=True)
    # subt√≠tulo para Bibliografia
    st.header('Bibliografia')
    # lista de links
    st.markdown('''
                    - [**OPEC**](https://www.opec.org/opec_web/en/about_us/24.htm) - Organization of the Petroleum Exporting Countries
                    - [**CBI**](https://cbie.com.br/) - Centro Brasileiro de Infraestrutura
                    - [**Investopedia**](https://www.investopedia.com/terms/f/futuresmarket.asp) - Futures Market
                    - [**Wikipedia**](https://en.wikipedia.org/wiki/Brent_Crude) - Brent Crude Oil
                    - [**AWS**](https://aws.amazon.com/pt/) - Amazon Web Services
                    - [**Super Interessante**](https://super.abril.com.br/coluna/deriva-continental/nos-bastidores-da-terra-geologa-explica-a-formacao-do-petroleo) - Nos bastidores da Terra: ge√≥loga explica a forma√ß√£o do petr√≥leo
                    - [**Forecasting Oil Price Using Web-based Sentiment Analysis**](https://www.mdpi.com/1996-1073/12/22/4291) - 
                        Energies (2019), por ZHAO, Lu-Tao; ZENG, Guan-Rong; WANG, Wen-Jing; ZHANG, Zhi-Gang
                    - [**An√°lise pr√°tica de s√©ries temporais: predi√ß√£o com estat√≠stica e aprendizado de m√°quina**](https://www.amazon.com.br/An√°lise-Pr√°tica-S√©ries-Temporais-Estat√≠stica/dp/8550815624) - 
                        Alta Books (2021), por NIELSEN, Aileen
                ''')
    
    
# footer
st.markdown('<br>', unsafe_allow_html=True)

st.markdown('---')

# texto -> Agradecimentos
st.markdown('''<p style="font-size: 18px; text-align: center;">
            Obrigado por acompanhar este projeto! üöÄ
            <br>
            </p>''', unsafe_allow_html=True)

linkedin = 'https://www.linkedin.com/in/viniplima/'
github = 'https://github.com/euvina/'

mail = 'pradolimavinicius@gmail.com'
subject = 'Contato via Streamlit - Projeto Previs√£o de Pre√ßo do Petr√≥leo Brent'

# √°rea de contato
st.markdown('''<p style="font-size: 18px; text-align: center;">
            üìß Entre em contato:<br>
            <a href="mailto:{}?subject={}">
            <img src="https://img.shields.io/badge/-Gmail-D14836?style=for-the-badge&logo=Gmail&logoColor=white" alt="Gmail">
            </a>
            <a href="{}">
            <img src="https://img.shields.io/badge/-GitHub-181717?style=for-the-badge&logo=GitHub&logoColor=white" alt="GitHub">
            </a>
            <a href="{}">
            <img src="https://img.shields.io/badge/-LinkedIn-0077B5?style=for-the-badge&logo=LinkedIn&logoColor=white" alt="LinkedIn">
            </a>
            </p>'''.format(mail, subject, linkedin, github), unsafe_allow_html=True)
