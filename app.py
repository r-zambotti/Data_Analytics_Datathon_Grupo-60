# Importar bibliotecas
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# import statsmodels.api as sm
import seaborn as sns
# import plotly.graph_objects as go
# import plotly.express as px
# import pmdarima as pm
import requests

#from keras.models import Sequential
#from keras.layers import LSTM, Dense
# from plotly.subplots import make_subplots
# from prophet import Prophet
# from prophet.plot import plot_plotly
# from statsmodels.tsa.seasonal import seasonal_decompose
# from statsmodels.tsa.stattools import acf, pacf, adfuller
# from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
# from sklearn.metrics import mean_absolute_error, mean_squared_error,accuracy_score
# from sklearn.preprocessing import MinMaxScaler

# from sklearn.model_selection import TimeSeriesSplit
# from statsmodels.tsa.stattools import adfuller

from PIL import Image
from io import BytesIO
from scipy.stats import norm

# import pickle

from utils import (normality_test, 
                   create_warning, 
                   create_quote, 
                   create_curiosity, 
                   create_insight, 
                   create_analysis, 
                   insert_image)

# layout
st.set_page_config(layout='centered', 
                   page_title='Associa√ß√£o Passos M√°gicos - Tech Challenge - FIAP', 
                   page_icon='üåü', initial_sidebar_state='auto')

#Bases
url = "https://raw.githubusercontent.com/r-zambotti/Data_Analytics_Datathon_Grupo-60/main/Bases/df_alunos.csv"
url_file_data = "https://raw.githubusercontent.com/r-zambotti/Data_Analytics_Datathon_Grupo-60/main/file/Dicion%C3%A1rio%20Dados%20Datathon.pdf"

response = requests.get(url)
csv_data = response.content

response = requests.get(url_file_data)
file_data = response.content


# pagina√ß√£o
page_0 = 'Introdu√ß√£o ‚ú®'
page_1 = 'An√°lise Explorat√≥ria üé≤'
page_2 = 'Aplica√ß√£o Anal√≠tica üìà'
page_3 = 'Conclus√£o üìå'
page_4 = 'Refer√™ncias üìñ'

# menu lateral
st.sidebar.title('Menu')
page = st.sidebar.radio('Selecione a p√°gina:', 
                        [page_0, page_1, page_2, page_3, page_4])

        
# Introdu√ß√£o
if page == page_0:
    
    # t√≠tulo da p√°gina
    st.title('Impacto causado pela ONG Passos M√°gicos üí´')
    
    # descri√ß√£o
    st.markdown('''
                Analisando impacto causado pelas a√ß√µes volunt√°rias da ONG Passos M√°gicos, desenvolvendo uma an√°lise explorat√≥ria, gerando insights e dashboard interativos.<br> 
                <br>Desenvolvido para a <b>P√≥s-Tech Data Analytics ‚Äî FIAP</b>.
                ''', unsafe_allow_html=True)

    st.markdown('<br>', unsafe_allow_html=True)
    
    create_warning('Importante', 
                   '''
                        Este artigo tem fins exclusivamente educacionais.<br><br>
                        Para acessar os Dados do projeto, clicar na op√ß√£o abaixo "Nota T√©cnica". 
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)

    # expans√£o com nota t√©cnica
    with st.expander('üóíÔ∏è Nota T√©cnica'):



        st.markdown('''
        #### Dados do projeto

        **üéØ Objetivo**: Analisar impacto causado pela ONG Passos M√°gicos e gerar an√°lise com base nos dados apresentados.

        ---
        
        **üõ∏ Modelos**: os dados utilizados para an√°lise e treinamento no modelo foram coletados em 18/05/2024 e correspondem ao per√≠odo de 20/05/1987 a 13/05/2024.
        - [XGBoost](https://xgboost.readthedocs.io/en/stable/)
        - [Prophet](https://facebook.github.io/prophet/)

        ---
        
        **üì° Base de Dados e Dicion√°rio**:
        ''')

        tab0, tab1 = st.tabs(tabs=['Base de Dados', 'Dicion√°rio'])

        with tab0:
            # Fun√ß√£o para carregar o arquivo Excel com cache
            @st.cache_data
            def carregar_dados(url):
                return pd.read_excel(url, sheet_name=None, engine="openpyxl")

            with st.container():
                st.markdown('''Base de dados PEDE (Pesquisa Extensiva do Desenvolvimento Educacional)''', unsafe_allow_html=True)

                # URL do arquivo
                url = "https://github.com/r-zambotti/Data_Analytics_Datathon_Grupo-60/raw/refs/heads/main/Bases/PEDE_PASSOS_2024.xlsx"

                opcao = st.radio("Selecione base para download:", ["Base de Dados PEDE", "Base de Dados Tratada"], horizontal=True)

                if opcao == "Base de Dados PEDE":
                    # Carrega os dados do Excel usando cache
                    xls = carregar_dados(url)

                    # Criar buffer para download
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine="openpyxl") as writer:
                        for sheet_name, df in xls.items():
                            df.to_excel(writer, index=False, sheet_name=sheet_name)

                    excel_data = output.getvalue()

                    st.download_button(
                        label="Baixar Base PEDE (xlsx)",
                        data=excel_data,
                        file_name="PEDE_PASSOS_2024.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

                if opcao == "Base de Dados Tratada":
                    st.download_button(label="Baixar Base Tratada (csv)",data=csv_data,file_name="df_alunos.csv",mime="text/csv")

        with tab1:
            st.markdown('''                   
                        ###### Download do dicion√°rio
                        ''',unsafe_allow_html=True)
            
            st.download_button(label="Dicion√°rio da base PEDE",data=file_data,file_name="Dicion√°rio dados PEDE.pdf",mime="application/pdf")

            st.markdown('''                   
                        Importante: <br>
                        O dicion√°rio disponibilizado para download √© a vers√£o com as bases de 2020 at√© 2022, material disponibilizado pela institui√ß√£o de ensino para o des√°fio.
                        ''',unsafe_allow_html=True) 
            
        st.markdown('''        
        ---
        **üì° Fontes de dados**:
        - [PASSOS M√ÅGICOS](https://passosmagicos.org.br/)
        - [GOOGLE DRIVE](https://drive.google.com/drive/folders/1Z1j6uzzCOgjB2a6i3Ym1pmJRsasfm7cD)
        ---
        
        **üßëüèª‚ÄçüöÄ Autores**: 
        - [Victor Novais de Oliveira](https://www.linkedin.com/in/victor-novais-166369171/)
        - [Rodrigo Zambotti de Andrade](https://www.linkedin.com/in/rodrigo-zambotti-369840a4?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=ios_app)
        - [Arencio Job Pereira](https://www.linkedin.com)  
        - [Bruno Akio Matsuzaki Shimada](https://www.linkedin.com)                     
        ---
        
        **ü™ê Reposit√≥rio**: 
        - [GitHub](https://github.com/r-zambotti/Data_Analytics_Datathon_Grupo-60.git)

        ---
        
        ''')
    
    st.markdown('---')
    
    # contexto para o objeto de estudo
    st.markdown('## Sobre a Associa√ß√£o Passos M√°gicos')
    
    st.markdown('''
                <p style="font-size: 18px">
                A Associa√ß√£o Passos M√°gicos tem uma trajet√≥ria de 30 anos de atua√ß√£o, trabalhando na transforma√ß√£o da vida de crian√ßas e jovens de baixa renda os levando a melhores oportunidades de vida.<br>

                A transforma√ß√£o, idealizada por Michelle Flues e Dimetri Ivanoff, come√ßou em 1992, atuando dentro de orfanatos, no munic√≠pio de Embu-Gua√ßu.
                Em 2016, depois de anos de atua√ß√£o, decidem ampliar o programa para que mais jovens tivessem acesso a essa f√≥rmula m√°gica para transforma√ß√£o.
                Passaram ent√£o a atuar como um projeto social e educacional, criando assim a Associa√ß√£o Passos M√°gicos.
                </p>
                ''', unsafe_allow_html=True)  
    
    create_quote('''
            "Investir em educa√ß√£o √© plantar as sementes de um futuro promissor para cada crian√ßa".<br>
            ''','- Associa√ß√£o Passos M√°gicos')

    # contexto miss√£o, programas e impactos - menu de tabelas
    tab1, tab2, tab3 = st.tabs(
    tabs=["Miss√£o e Vis√£o", "Programas e Atividades", "Impacto e Resultados"])

    with tab1:
        st.markdown('''
                    <p style="font-size: 18px">
                    üéØ<b> Miss√£o:</b> A miss√£o da Passos M√°gicos √© transformar a vida de jovens e crian√ßas, fornecendo ferramentas que os levem a melhores oportunidades de vida. <br><br>
                    üëÅ <b> Vis√£o:</b> A vis√£o da organiza√ß√£o √© viver em um Brasil onde todas as crian√ßas e jovens tenham iguais oportunidades para realizar seus sonhos e se tornem agentes transformadores de suas pr√≥prias vidas.
                    </p>
                    ''', unsafe_allow_html=True)

    with tab2:
        st.markdown(''' 
                    <p style="font-size: 18px">
                    A Passos M√°gicos oferece uma variedade de programas educacionais e de apoio, incluindo:
                    </p>
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Educa√ß√£o de qualidade:</b> Acesso a ensino de alta qualidade para crian√ßas e jovens;            
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Assist√™ncia psicol√≥gica e psicopedag√≥gica:</b> Suporte emocional e educacional para ajudar no desenvolvimento integral dos alunos;
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Amplia√ß√£o da vis√£o de mundo: </b>Projetos de interc√¢mbio e apadrinhamento que visam integrar os alunos a diferentes culturas e ambientes;
                    ''', unsafe_allow_html=True)
        
        st.markdown('''- <b>Campanhas de arrecada√ß√£o:</b> Anualmente, s√£o promovidas campanhas para arrecadar fundos e presentes para as crian√ßas e adolescentes atendidos pela institui√ß√£o.
                    ''', unsafe_allow_html=True)

    with tab3:
        st.markdown('''
                    <p style="font-size: 18px">
                    Desde sua funda√ß√£o, a Passos M√°gicos tem expandido significativamente seu alcance e impacto. 
                    Em 2016, a organiza√ß√£o formalizou-se como um projeto social e educacional, ampliando suas atividades para beneficiar mais jovens. Atualmente, 
                    a institui√ß√£o atende centenas de crian√ßas e adolescentes, oferecendo bolsas de estudo, suporte psicol√≥gico e oportunidades de interc√¢mbio.
                    </p>
                    ''', unsafe_allow_html=True)
        
    st.markdown('---')

    # Inserindo imagem da ONG Passos M√°gicos

    image =  Image.open("img/passos_magicos.png")
    st.image(image, caption= "Imagem oficial da ONG Passos M√°gicos")
    
# An√°lise Explorat√≥ria
elif page == page_1:

    st.title('An√°lise Explorat√≥ria üîé')
    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('''
                A an√°lise Explorat√≥ria do projeto foi realizada com a base <b><font color='blue'>PEDE (Pesquisa Extensiva do Desenvolvimento Educacional)</b></font> da Passos M√°gicos e foi disponibilizada toda documenta√ß√£o 
                explicando como foram criadas cada √≠ndice e m√©tricas j√° existentes. A PASSOS M√ÅGICOS utiliza uma m√©trica chamada <b><font color='blue'>INDE (√çndice Nacional de Desenvolvimento Educacional)</b></font> para avaliar 
                os alunos essa m√©trica √© composta por alguns indicadores que s√£o separados em 3 dimens√µes principais onde avaliam v√°rios crit√©rios como adequa√ß√£o de n√≠vel, desempenho acad√™mico, engajamento, autoavalia√ß√£o, aspectos 
                psicossociais e psicopedag√≥gicos, essas dimens√µes est√£o divididas conforme abaixo e cada uma delas trazem os seguintes indicadores:
                ''', unsafe_allow_html=True)
    
    st.markdown('''
                - Dimens√£o acad√™mica: Com os indicadores IEG, IDA e IAN
                ''',  unsafe_allow_html=True)
    
    st.markdown('''
                - Dimens√£o psicossocial: Com os indicadores IAA e IPS
                ''',  unsafe_allow_html=True)
    
    st.markdown('''
                - Dimens√£o psicopedag√≥gica: Com os indicadores IPP e IPV
                ''',  unsafe_allow_html=True)

    st.markdown('''
                Quanto ao <b><font color='blue'>INDE </b></font> geral tem uma m√©dia de 6,84, obtendo uma varia√ß√£o bem grande entre o m√≠nimo de 3,03 e m√°ximo de 9,53; 
                ao realizar a an√°lise por ano podemos observar que tem um aumento na quantidade de alunos e os n√≠veis do INDE caem, nos trazendo o desafio de come√ßar a segregar essa informa√ß√£o para buscar o gap.
                ''', unsafe_allow_html=True) 

    st.markdown('''
                Com base nas an√°lises, √© poss√≠vel observar que a maioria dos estudantes tende a se concentrar nos intervalos de scores entre (6.88, 7.52], 
                indicando um desempenho consistente e relativamente alto em v√°rias m√©tricas. A tend√™ncia geral mostra um aumento no n√∫mero de estudantes nos intervalos superiores ao longo dos anos, 
                sugerindo melhorias nos √≠ndices de desenvolvimento educacional, autoavalia√ß√£o, engajamento, psicossocial, aprendizagem e pontos de virada.
                ''', unsafe_allow_html=True)

    #An√°lise dos Indicadores
    st.subheader('An√°lise dos Indicadores', divider='orange')

    #Divindo cada indicador em selectbox para melhor visualiza√ß√£o
    indicador = st.selectbox('Selecione o indicador:', ['INDE','Pedras','IEG', 'IDA', 'IAN', 'IAA', 'IPS', 'IPP', 'IPV'])

    #Tabela INDE
    if indicador == 'INDE':
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O INDE (√≠ndice do desenvolvimento educacional), como medida s√≠ntese do presente processo avaliativo, √© composto
                    por uma dimens√£o acad√™mica, uma dimens√£o psicossocial e uma dimens√£o psicopedag√≥gica. Essas dimens√µes s√£o observadas por meio do resultado
                    de sete indicadores <b>(IAN, IDA, IEG, IAA, IPS, IPP e IPV)</b>, que aglutinados por pondera√ß√£o, formam o √≠ndice sint√©tico (INDE). <br>

                    No quadro abaixo, pode ser visto uma apresenta√ß√£o esquem√°tica da rela√ß√£o entre as tr√™s dimens√µes de avalia√ß√£o, e os indicadores, em suas duas categorias de classifica√ß√£o 
                    e a sua aplica√ß√£o pelas faixas de Fase de ensino da Associa√ß√£o Passos M√°gicos. 

                    </p>
                    ''', unsafe_allow_html=True)    

        image =  Image.open("img/inde_indicadores.png")
        st.image(image, caption= "Dimens√µes e Indicadores do INDE")       

    #Tabela Pedras
    if indicador == 'Pedras':

        st.markdown('''
                    <p style="font-size: 18px">

                    As pedras s√£o definidas com base no √≠ndice do desenvolvimento educacional (INDE). Com base nas m√©dias geradas pelos indicadores, conseguimos calcular como cada pedra ser√° criada e atribuida a cada aluno.<br>  
                    Como um dos principais objetivos do c√°lculo do INDE √© ter um par√¢metro de avalia√ß√£o do desenvolvimento educacional dos estudantes da Associ√ß√£o Passos M√°gicos, as suas medidas de variabilidade (m√©dida, mediana e moda), nos possibilitam a forma√ß√£o de um crit√©rio
                    de classifica√ß√£o de nota padronizada. Esse crit√©rio nos permite calcular intervalos de valor do INDE a partir do desempenho de todos os estudantes, comparando-os numa base mais justa, e n√£o simplesmente ordenando suas notas pelos seus valores absolutos. 
                    Assim, os resultados individuais do INDE levar√£o em conta as condi√ß√µes de dispers√£o das notas de todo o conjunto de estudantes. <b> A classifica√ß√£o das notas se dar√° ent√£o pela sua dist√¢ncia em rela√ß√£o √† m√©dia geral e n√£o por seu valor absoluto</b>. <br>
                    Segue imagem abaixo para melhor entendimento: 

                    </p>
                    ''',unsafe_allow_html=True)

        image =  Image.open("img/notas_padronizadas.png")
        st.image(image, caption= "Proje√ß√£o Normal e limites da nota padronizada INDE escolar")

        st.markdown('''
            <p style="font-size: 18px">

            Com base nessas notas, geramos as seguintes m√©dias para cada tipo de pedra: 
            - Quartzo: Alunos com INDE entre 3.032 a 5.996.
            - √Ågata: Alunos com INDE entre 6.0092 a 6.9995.
            - Ametista: Alunos com INDE entre 7.0000 a 8.058.
            - Top√°zio: Alunos com INDE entre 8.0026 a 9.5313.

            </p>
            ''',unsafe_allow_html=True)
        
    #Tabela IEG    
    if indicador == 'IEG':

        st.markdown('''
                    <p style="font-size: 18px">

                    ###### IEG (Indicador de Engajamento)

                    </p>
                    ''',unsafe_allow_html=True )
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O Indicador de Engajamento - IEG, registra a participa√ß√£o em a√ß√µes de voluntariado dos estudantes universit√°rios, e a entrega das li√ß√µes de casa dos estudantes em fase escolar.
                    O indicador dos escolares foi produzido a partir dos registros feitos, diariamente, pela equipe pedag√≥gica, no sistema escolar da Associa√ß√£o. 

                    </p>
                    ''',unsafe_allow_html=True )

    #Tabela IDA
    if indicador == 'IDA':

        st.markdown('''
                    <p style="font-size: 18px">

                    ###### IDA (Indicador de Desempenho Acad√™mico)

                    </p>
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O IDA expressa a profici√™ncia dos estudantes da Fase 0 (alfabetiza√ß√£o), at√© a Fase 7 (3¬∫ ano do ensino m√©dio), nas provas aplicadas pela Associa√ß√£o Passos M√°gicos, numa mesma base n√∫merica (de 0 a 10 pontos). 
                    Para esses estudantes essa √© uma medida uniforme de avalia√ß√£o, pois essas provas se referem aos conte√∫dos e √†s habilidades associadas a esses conte√∫dos, que foram desenvolvidos no contexto do Programa de Acelera√ß√£o do Conhecimento.                
                    Para os estudantes da Fase 8, bolsistas universit√°rios, esse indicador expressa a m√©dia anual das avalia√ß√µes de cada disciplina cursada em seus respectivos cursos, na mesma base n√∫merica (de 0 a 10 pontos).

                    </p>
                    ''',unsafe_allow_html=True)

    #Tabela IAN
    if indicador == 'IAN':

        st.markdown('''
                    <p style="font-size: 18px">

                    ###### IAN (Indicador de Adequa√ß√£o de N√≠vel)

                    </p>
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O indicador de Adequa√ß√£o de N√≠vel registra a condin√ß√£o de adequa√ß√£o do estudante, por meio da avalia√ß√£o pedag√≥gica e multidisciplinar da Associa√ß√£o,
                    √† Fase de Ensino efetivamente designada. Isso significa que o estudante √© designado para a Fase de Ensino que seja compat√≠vel com o atual est√°gio de desenvolvimento das suas 
                    capacidades e habilidades acad√™micas.<br>
                    Sendo assim, cabe confrontar o diagn√≥stico de atribui√ß√£o da Fase de Ensino efetivamente designada aos estudantes, com o seu respectivo desempenho acad√™mico, para verificar
                    se n√£o existe um desempenho acad√™mico advindo, meramente, da defasagem no N√≠vel de Ensino. Isso seria observado, caso o desempenho acad√™mico dos estudantes com defasagem fosse superior √† m√©dia dos
                    estudantes em geral, ou mesmo dos estudantes sem defasagens.

                    </p>
                    ''',unsafe_allow_html=True )

        image =  Image.open("img/ian_avaliacoes.png")
        st.image(image, caption= "Dimens√µes e Indicadores do INDE") 
        
    #Tabela IAA
    if indicador == 'IAA':

        st.markdown('''
                    <p style="font-size: 18px">

                    ###### IAA (Indicador de Autoavalia√ß√£o)

                    </p>
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O indicador de autoavalia√ß√£o - IAA, √© um indicador de avalia√ß√£o da dimens√£o psicossocial, isto √©, seus resultados s√£o uma medida produzida pelo pr√≥prio estudante, a partir de respostas sobre ele mesmo a respeito de aspesctos
                    da sua vida e da sua experi√™ncia cotidiana. <br>

                    O question√°rio de autoavalia√ß√£o investigou seis aspectos da vida do estudante, sendo esses: 
                    - Q1: Como se sente consigo mesmo?
                    - Q2: Como se sente sobre os estudos?
                    - Q3: Como se sente sobre a sua vida familiar? 
                    - Q4: Como se sente sobre sua rela√ß√£o com os amigos?
                    - Q5: Como se sente sobre a Associa√ß√£o Passos M√°gicos? 
                    - Q6: Como se sente sobre seus Professores na Passos M√°gicos?

                    </p>
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">

                    Confira na imagem abaixo: 

                    </p>
                    ''',unsafe_allow_html=True)        


        image =  Image.open("img/iaa_avaliacoes.png")
        st.image(image, caption= "Dimens√µes e Indicadores do INDE") 
        
    #Tabela IPS
    if indicador == 'IPS':

        st.markdown('''
                    <p style="font-size: 18px">

                    ######  IPS (Indicador de Psicossocial)

                    </p>
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O indicador Psicossocial - IPS, √© um indicador de conselho da dimens√£o psicossocial, seus resultados foram obtidos por meio de avalia√ß√µes feitas pela equipe de psicologia da Associa√ß√£o Passos M√°gicos. 
                    Nas avalia√ß√µes que resultaram na nota IPS, foram analisados quatro aspectos do desenvolvimento dos estudantes em 2022. Os elementos de avalia√ß√£o, suas categorias de avalia√ß√£o e seus pesos est√£o relacionados abaixo:

                    </p>
                    ''',unsafe_allow_html=True )

        image =  Image.open("img/ips_avaliacoes.png")
        st.image(image, caption= "Quest√µes de avalia√ß√£o do IPS, categorias e seus valores")
        
    #Tabela IPP
    if indicador == 'IPP':

        st.markdown('''
                    <p style="font-size: 18px">

                    ###### IPP (Indicador Psicopedag√≥gico)

                    </p>
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O indicador Psicopedag√≥gico - IPP, √© um indicador de conselho da dimens√£o psicopedag√≥gica, seus resultados foram obtidos por meio de avalia√ß√µes individuais,
                    feitas por membro da equipe de professores e psicopedagogos da Associa√ß√£o Passos M√°gicos.<bre>
                    A avalia√ß√£o que produziou o IPP, foi feita pela an√°lise individual de cada avaliador, de forma independente e sem conluio com os demais avaliadores,
                    buscando avaliar quatro aspectos dos estudantes:
                    - Desenvolvimento cognitivo;
                    - Desenvolvimento emocional; 
                    - Desenvolvimento comportamental; 
                    - Desenvolvimento social.<br>

                    </p>
                    ''',unsafe_allow_html=True)
                    
        st.markdown('''
                    <p style="font-size: 18px">
                    
                    Os avaliadores caracterizaram cada um desses aspectos, respondendo qual condi√ß√£o descreve melhor o seu desenvolvimento atual, as quais, ent√£o,
                    um valor. √â calculado, ent√£o, o valor m√©dio das avalia√ß√µes, em cada quest√£o, e ao final, somam-se essas m√©didas resultando numa nota de base comum, de 0 a 10.  
                    As quest√£oes, e os seus valores, ent√£o logo abaixo:                

                    </p>
                    ''',unsafe_allow_html=True)

        image =  Image.open("img/ipp_avaliacoes.png")
        st.image(image, caption= "Quest√µes de avalia√ß√£o do IPS, categorias e seus valores")                   
        
    #Tabela IPV
    if indicador == 'IPV':

        st.markdown('''
                    <p style="font-size: 18px">

                    ###### IPV (Indicador de Ponto de Virada)

                    </p>
                    ''',unsafe_allow_html=True)
        
        st.markdown('''
                    <p style="font-size: 18px">

                    O indicador do Ponto de Virada - IPV, √© um indicador de conselho da dimens√£o psicopedag√≥gica, seus resultados foram obtidos
                    por meio de avalia√ß√µes individuais, geitas por membros da equipe de professores e psicopedagogos da Associa√ß√£o Passos M√°gicos. <br>

                    O que se chama Ponto de Virada √© um est√°gio do desenvolvimento do estudante, no qual ele demonstra de forma ativa, por meio da sua trajet√≥ria dentro da associa√ß√£o, estar consciente da import√¢ncia da educa√ß√£o, do valor do saber e da import√¢ncia de aprender. 
                    Passar pelo Ponto de Virada deve sifnificar estar apto a iniciar a transforma√ß√£o da sua vida por meio da educa√ß√£o. Portanto, n√£o se trata de um ponto de chegada, mas um momento no qual se inica uma importante mudan√ßa.<br>

                    A avalia√ß√£o do IPV foi feita pela avalia√ß√£o de tr√™s aspectos do desenvolvimento do estudante durante o ano letivo: 
                    - Integra√ß√£o √† associa√ß√£o; 
                    - Desenovlvimento emocional;
                    - Potencial acad√™mico. 

                    </p>
                    ''',unsafe_allow_html=True )

        st.markdown('''
                    <p style="font-size: 18px">
                    
                    Abaixo √© demonstrado a estrutura de avalia√ß√£o do IPV:                

                    </p>
                    ''',unsafe_allow_html=True)

        image =  Image.open("img/ipv_avaliacoes.png")
        st.image(image, caption= "Quest√µes de avalia√ß√£o do IPS, categorias e seus valores")        


# Aplica√ß√£o Anal√≠tica
elif page == page_2:

    df = pd.read_csv("https://raw.githubusercontent.com/r-zambotti/Data_Analytics_Datathon_Grupo-60/main/Bases/df_alunos.csv")

    # Estilizando o t√≠tulo e centralizando
    st.markdown("<h1 style='text-align: center;'>üìà Aplica√ß√£o Anal√≠tica</h1>", unsafe_allow_html=True)

    # CSS para centralizar o r√°dio
    st.markdown(
        """
        <style>
        
            div[role="radiogroup"] {
                display: flex;
                justify-content: center;
            }

        </style>
        """,
        unsafe_allow_html=True
    )

    # Criando o menu centralizado
    menu = st.radio("", ["Dashboard", "Insight", "An√°lise Preditiva"], horizontal=True, label_visibility="collapsed")

    st.markdown('---', unsafe_allow_html=True)

    # Renderizando a op√ß√£o escolhida
    if menu == "Dashboard":
        st.subheader("üìä Dashboard")
      #  st.write("Aqui voc√™ pode visualizar os principais KPIs.")

        # Ajuste a codifica√ß√£o se necess√°rio
        df['ANO_LETIVO'] = df['ANO_LETIVO'].astype(str) 

        # Definir a coluna 'NOME' como √≠ndice (opcional)
        df_aluno1 = df.set_index('NOME')
                                
        # Iniciar o estado dos filtros se ainda n√£o estiverem definidos
        if 'ano_selecionado' not in st.session_state:
            st.session_state['ano_selecionado'] = None

        if 'matricula_selecionada' not in st.session_state:
            st.session_state['matricula_selecionada'] = None

        if 'indicador_selecionado' not in st.session_state:
            st.session_state['indicador_selecionado'] = None

        # Criar os widgets de filtro
        col1, col2, col3 = st.columns(3)

        with col1:
            anos_disponiveis = sorted(df['ANO_LETIVO'].unique())
            ano_selecionado = st.selectbox('Selecione o ano', [None] + list(anos_disponiveis), key='ano_selecionado')

        with col2:
            # Remove valores nulos e obt√©m os valores √∫nicos
            matriculas_disponiveis = df['INST_ENSINO'].dropna().unique()

            # Criar um dicion√°rio para exibir op√ß√µes em mai√∫sculas, mas manter os valores originais
            matriculas_maiusculas = {str(m).upper(): m for m in matriculas_disponiveis}

            # Criar o selectbox com as op√ß√µes em mai√∫sculas
            matricula_selecionada_maiuscula = st.selectbox(
                'Selecione o tipo de matr√≠cula', 
                [None] + list(matriculas_maiusculas.keys()), 
                key='matricula_selecionada'
            )

            # Recuperar o valor original selecionado
            matricula_selecionada = matriculas_maiusculas.get(matricula_selecionada_maiuscula, None)

        with col3:
            indicadores_disponiveis = ["INDE", "IAA", "IEG", "IPS", "IDA", "IPP", "IAN", "IPV"]
            indicador_selecionado = st.selectbox('Selecione o indicador', [None] + indicadores_disponiveis, key='indicador_selecionado')

        # Aplicar os filtros selecionados
        df_filtrado1 = df_aluno1.copy()

        if ano_selecionado:
            df_filtrado1 = df_filtrado1[df_filtrado1['ANO_LETIVO'] == ano_selecionado]

        if matricula_selecionada:
            df_filtrado1 = df_filtrado1[df_filtrado1['INST_ENSINO'] == matricula_selecionada]

        # Fun√ß√£o para criar containers personalizados
        def criar_container_titulo(conteudo_html):
            return st.markdown(conteudo_html, unsafe_allow_html=True)

        # Atualizar os quadros com base no filtro selecionado
        cols_container = st.columns(2, gap="small")

        with cols_container[0]:
            quadro = cols_container[0].container(height=315, border=True)
            total_alunos = len(df_filtrado1)
            quadro.markdown(f'''
                            <p style="font-size: 50px; text-align: center; margin: 0;">
                            <br><b>{total_alunos}</b><br>
                            </p>
                            ''', unsafe_allow_html=True)

            quadro.markdown('''
                            <p style="font-size: 34px; text-align: center;">
                            <b>Alunos Matriculados</b>
                            </p>
                            ''', unsafe_allow_html=True)

        with cols_container[1]:

            cols_container1 = st.columns(2, gap="small")
            with cols_container1[0]:
                # Calcular o total Masculino
                total_masculino = df_filtrado1[df_filtrado1['GENERO'] == 'Masculino']['GENERO'].count()
                quadro = cols_container1[0].container(height=150, border=True)
                quadro.markdown(f'''
                                <p style="font-size: 36px; text-align: center; color: lightblue;">                           
                                <b>{total_masculino}</b><br>
                                üë®üèª‚Äçüéì
                                </p>
                                ''', unsafe_allow_html=True)

            with cols_container1[1]:
                # Calcular o total Feminino
                total_feminino = df_filtrado1[df_filtrado1['GENERO'] == 'Feminino']['GENERO'].count()
                quadro = cols_container1[1].container(height=150, border=True)
                quadro.markdown(f'''
                                <p style="font-size: 36px; text-align: center; color: pink;">
                                <b>{total_feminino}</b><br>
                                üë©üèº‚Äçüéì
                                </p>
                                ''', unsafe_allow_html=True)

            cols_container2 = st.columns(2, gap="small")
            with cols_container2[0]:
                # Calcular a porcentagem de alunos masculinos
                if total_alunos > 0:
                    perc_masculino = (total_masculino / total_alunos) * 100
                else:
                    perc_masculino = 0
                quadro = cols_container2[0].container(height=150, border=True)
                quadro.markdown(f'''
                                <p style="font-size: 30px; text-align: center; color: lightblue;">
                                <b>{perc_masculino:.2f}% Masculino</b>
                                </p>
                                ''', unsafe_allow_html=True)    

            with cols_container2[1]:
                # Calcular a porcentagem de alunos femininos
                if total_alunos > 0:
                    perc_feminino = (total_feminino / total_alunos) * 100
                else:
                    perc_feminino = 0
                quadro = cols_container2[1].container(height=150, border=True)
                quadro.markdown(f'''
                                <p style="font-size: 30px; text-align: center; color: pink;">
                                <b>{perc_feminino:.2f}% Feminino</b>
                                </p>
                                ''', unsafe_allow_html=True)

        # Criar duas colunas principais para organizar os containers
        col_pedras, col_indicador = st.columns([1, 1], gap="small")

        # Exibir a contagem de alunos por tipo de PEDRA dentro da primeira coluna
        with col_pedras:
            tipos_pedra = df_filtrado1.loc[df_filtrado1['PEDRA'].notna() & (df_filtrado1['PEDRA'] != "nao_informado"), 'PEDRA'].unique()

            num_colunas = 2
            rows = [tipos_pedra[i:i + num_colunas] for i in range(0, len(tipos_pedra), num_colunas)]

            for row in rows:
                cols_pedra = st.columns(num_colunas, gap="small")
                for i, tipo in enumerate(row):
                    total_tipo = len(df_filtrado1[df_filtrado1['PEDRA'] == tipo])
                    with cols_pedra[i]:
                        quadro = cols_pedra[i].container(height=150, border=True)
                        quadro.markdown(f'''
                            <p style="font-size: 30px; text-align: center;">
                            <b>{total_tipo}<br>
                            {tipo}</b>
                            </p>
                        ''', unsafe_allow_html=True)

        # Exibir a m√©dia do indicador na segunda coluna
        with col_indicador:
            if indicador_selecionado and indicador_selecionado in df_filtrado1.columns:
                media_indicador = df_filtrado1[indicador_selecionado].mean()
                quadro = st.container(height=315, border=True)
                quadro.markdown(f'''
                                <p style="font-size: 40px; text-align: center;">
                                <br><b>{media_indicador:.2f}%</b>
                                </p>
                                ''', unsafe_allow_html=True)
                quadro.markdown(f'''
                                <p style="font-size: 30px; text-align: center;">
                                <b>M√©dia do indicador {indicador_selecionado}</b>
                                </p>
                                ''', unsafe_allow_html=True)
            else:
                quadro = st.container(height=315, border=True)
                quadro.markdown('''
                                <p style="font-size: 34px; text-align: center;">
                                <br><b>Selecione um indicador para ver a m√©dia</b>
                                </p>
                                ''', unsafe_allow_html=True)
                
    elif menu == "Insight":
        st.subheader("üí° Insights")

        # sele√ß√£o de modelo
        model = st.selectbox('Selecione o modelo:', ['An√°lise por Aluno', 'Indicadores', 'Pedras', 'Ponto de Virada'])

        st.markdown('<br>', unsafe_allow_html=True)

        if model == 'An√°lise por Aluno':
            st.subheader('An√°lise por Aluno', divider='orange')

            # texto 
            st.markdown('''
                <p style="font-size: 18px">
                    Nesse modelo, podemos filtrar de maneira din√¢mica cada aluno da associa√ß√£o passos m√°gicos que estiveram presentes entre os anos de
                    2022 at√© 2024. Com base nesse filtro, √© poss√≠vel ter uma vis√£o geral da base e come√ßar a dar os primeiros passos em uma an√°lise explorat√≥ria.
                    <br>
                </p>
                ''', unsafe_allow_html=True)

            if 'multi' not in st.session_state: 
                st.session_state['multi'] = []

            if 'ano_selecionado2' not in st.session_state:
                st.session_state['ano_selecionado2'] = None

            if 'turma_selecionada' not in st.session_state:
                st.session_state['turma_selecionada'] = None

            if 'fase_selecionada' not in st.session_state:
                st.session_state['fase_selecionada'] = None

            if 'comparador_inde' not in st.session_state:
                st.session_state['comparador_inde'] = 'Nenhum'

            if 'valor_inde' not in st.session_state:
                st.session_state['valor_inde'] = 0

            df_aluno = df.set_index('NOME')
            
            col7, col8= st.columns([3,1])

            with col7:
                def clear_multi():
                    st.session_state.multiselect = []
                    return
                    
                multi = st.multiselect('Selecione um ou mais alunos', df_aluno.index.unique(), key='multiselect')
                st.button("Limpar alunos", on_click=clear_multi)
                                
            with col8:
                anos_disponiveis = df['ANO_LETIVO'].unique()
                ano_selecionado2 = st.selectbox('Selecione o ano', [None] + list(anos_disponiveis), key='ano_selecionado2')

            col9, col10, col11, col12 = st.columns(4)

            with col9:
                turmas_disponiveis = df['TURMA'].unique()
                turma_selecionada = st.selectbox('Selecione a turma', [None] + list(turmas_disponiveis), key='turma_selecionada')

            with col10:
                fases_disponiveis = df['FASE'].unique()
                fase_selecionada = st.selectbox('Selecione a fase', [None] + list(fases_disponiveis), key='fase_selecionada')

            with col11:
                comparador_inde = st.selectbox('Filtrar INDE por', ['Nenhum', 'Maior que', 'Menor que'], key='comparador_inde')

            with col12:
                valor_inde = st.number_input('Digite o valor para o INDE', step=1, key='valor_inde')

            df_filtrado = df_aluno.copy()
            df_filtrado['ATINGIU_PV'] = df_filtrado['ATINGIU_PV']

            def reset_filters():
                st.session_state['aluno_selecionado'] = []
                st.session_state['ano_selecionado2'] = None
                st.session_state['turma_selecionada'] = None
                st.session_state['fase_selecionada'] = None
                st.session_state['comparador_inde'] = 'Nenhum'
                st.session_state['valor_inde'] = 0

            st.button('Limpar Filtros', on_click=reset_filters)

            # Filtragem do dataframe
            if multi:
                df_filtrado = df_filtrado[df_filtrado.index.isin(multi)]

            if ano_selecionado2:
                df_filtrado = df_filtrado[df_filtrado['ANO_LETIVO'] == ano_selecionado2]

            if turma_selecionada:
                df_filtrado = df_filtrado[df_filtrado['TURMA'] == turma_selecionada]

            if fase_selecionada:
                df_filtrado = df_filtrado[df_filtrado['FASE'] == fase_selecionada]

            if comparador_inde == 'Maior que':
                df_filtrado = df_filtrado[df_filtrado['INDE'] > valor_inde]
            elif comparador_inde == 'Menor que':
                df_filtrado = df_filtrado[df_filtrado['INDE'] < valor_inde]

            # Converter colunas num√©ricas para inteiros (removendo casas decimais)
            for col in df_filtrado.select_dtypes(include=['float']).columns:
                df_filtrado[col] = df_filtrado[col].astype(int)

            # Corrigir exibi√ß√£o removendo separador de milhar
            df_filtrado = df_filtrado.applymap(lambda x: f"{x}" if isinstance(x, int) else x)

            # Estilo CSS para ajustar a largura da tabela
            st.markdown(
                """
                <style>
                .dataframe-container {
                    display: flex;
                    justify-content: flex-start;
                    width: 100%;
                }
                .dataframe-container > div {
                    width: 100%;
                }
                </style>
                """, unsafe_allow_html=True
            )

            # Cont√™iner para aplicar o estilo apenas √† tabela
            st.markdown('<div class="dataframe-container">', unsafe_allow_html=True)
            st.dataframe(df_filtrado)
            st.markdown('</div>', unsafe_allow_html=True)

        elif model == 'Indicadores':

            st.subheader('Indicadores', divider='orange')

            # texto
            st.markdown('''
                        - INDE - Indice do Desenvolvimento Educacional
                        - IAA - Indicador de Auto Avali√ßao
                        - IEG - Indicador de Engajamento
                        - IPS - Indicador Psicossocial
                        - IDA - Indicador de Aprendizagem
                        - IPP - Indicador Psicopedagogico
                        - IPV - Indicador de Ponto de Virada
                        ''')        

            # Carregar o DataFrame com tratamento de poss√≠veis issues
            df = pd.read_csv("https://raw.githubusercontent.com/r-zambotti/Data_Analytics_Datathon_Grupo-60/main/Bases/df_alunos.csv")

            # Definindo os bins do histograma
            bins = [3.03, 3.67, 4.31, 4.96, 5.60, 6.24, 6.88, 7.52, 8.16, 8.80, 9.44]

            col1, col2= st.columns(2)

            with col1:
                anos_disponiveis = sorted(df['ANO_LETIVO'].unique())
                ano_selecionado = st.selectbox('Selecione o ano', [None] + anos_disponiveis)

            with col2:
                indicadores_disponiveis = ["INDE", "IAA", "IEG", "IPS", "IDA", "IPP", "IPV"]
                indicador_selecionado = st.selectbox('Selecione o indicador', [None] + indicadores_disponiveis)

            # Aplicar filtros
            df_filtrado = df.copy()
            if ano_selecionado:
                df_filtrado = df_filtrado[df_filtrado['ANO_LETIVO'] == ano_selecionado]

            # C√°lculo dos valores M√≠nimo, M√©dio e M√°ximo
            if indicador_selecionado and not df_filtrado.empty:
                valores_ordenados = df_filtrado[indicador_selecionado].sort_values().values
                minimo = next((val for val in valores_ordenados if val > 0), valores_ordenados[0] if len(valores_ordenados) > 0 else 0)
                media = df_filtrado[indicador_selecionado].mean()
                maximo = df_filtrado[indicador_selecionado].max()

                with st.container():
                    st.markdown("""
                        <style>
                            .metric-container {
                                font-size: 20px;
                                border: 1px solid #808080;
                                padding: 05px;
                                border-radius: 6px;
                                text-align: center;
                            }
                        </style>
                    """, unsafe_allow_html=True)

                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown(f'<div class="metric-container">M√≠nimo do {indicador_selecionado}<br><b>{round(minimo, 2)}</b></div>', unsafe_allow_html=True)
                    with col2:
                        st.markdown(f'<div class="metric-container">M√©dia do {indicador_selecionado}<br><b>{round(media, 2)}</b></div>', unsafe_allow_html=True)
                    with col3:
                        st.markdown(f'<div class="metric-container">M√°ximo do {indicador_selecionado}<br><b>{round(maximo, 2)}</b></div>', unsafe_allow_html=True)

                st.markdown('---')
                # Criar categorias para o histograma
                df_filtrado[f'{indicador_selecionado}_bin'] = pd.cut(df_filtrado[indicador_selecionado], bins=bins)

                # Agrupar por ano letivo e bin
                counts = df_filtrado.groupby(['ANO_LETIVO', f'{indicador_selecionado}_bin']).size().reset_index(name='frequencia')

                # Gr√°fico de barras
                plt.figure(figsize=(14, 7))
                ax = sns.barplot(x=f'{indicador_selecionado}_bin', y='frequencia', hue='ANO_LETIVO', data=counts, palette='viridis')

                # Anota√ß√µes no gr√°fico
                for p in ax.patches:
                    if p.get_height() > 0:
                        ax.annotate(f'{int(p.get_height())}', 
                                    (p.get_x() + p.get_width() / 2., p.get_height()),
                                    ha='center', va='center', fontsize=10, color='black',
                                    xytext=(0, 5), textcoords='offset points')

                plt.xlabel(f'Intervalos do {indicador_selecionado}', fontsize=12)
                plt.ylabel('Alunos', fontsize=12)
                plt.title(f'Distribui√ß√£o do {indicador_selecionado} por Ano Letivo', fontsize=14, fontweight='bold')
                plt.xticks(rotation=45, ha='right')
                plt.legend(title='Ano Letivo', fontsize=10, title_fontsize=12)
                plt.tight_layout()
                st.pyplot(plt)

            else:
                st.markdown(
                    """
                    <div style="text-align: center;">
                        <br>Por favor, selecione um indicador para visualizar os dados.<b>
                    </div>
                    """, unsafe_allow_html=True
                )


        elif model == 'Pedras':
            
            df = pd.read_csv("https://raw.githubusercontent.com/r-zambotti/Data_Analytics_Datathon_Grupo-60/main/Bases/df_pedra_geral.csv")
            
            plt.rcParams.update({'font.size': 14})  # Ajuste para aumentar toda a fonte do gr√°fico


            st.subheader('Pedras', divider='orange')

            # texto
            st.markdown('''
                        Classifica√ß√£o referente a cada tipo de pedra com base no INDE de cada aluno:
                        - Quartzo ‚Äì 2,405 a 5,506
                        - Agata ‚Äì 5,506 a 6,868
                        - Ametista ‚Äì 6,868 a 8,230
                        - Topazio ‚Äì 8,230 a 9,294
                        ''', unsafe_allow_html=True)
            
            df['ano_letivo'] = df['ano_letivo'].astype(str) 
            
            df_pedra = df.set_index('ano_letivo')

            # Criar sess√£o de estado para os filtros se ainda n√£o existirem
            for key in ['ano_selecionado3', 'pedra_selecionada', 'genero_selecionado']:
                if key not in st.session_state:
                    st.session_state[key] = None

            col1, col2, col3 = st.columns(3)

            with col1:
                anos_disponiveis3 = sorted(df['ano_letivo'].unique())
                ano_selecionado3 = st.selectbox('Selecione o ano', [None] + list(anos_disponiveis3), key='ano_selecionado3')     

            with col2:
                # Remover "nao_informado" da lista de op√ß√µes
                pedras_disponiveis = sorted(df['pedra'].unique())
                pedras_disponiveis = [p for p in pedras_disponiveis if p != "nao_informado"]
                
                pedra_selecionada = st.selectbox('Selecione a pedra', [None] + pedras_disponiveis, key='pedra_selecionada')  

            with col3:
                generos_disponiveis = sorted(df['genero'].unique())
                genero_selecionado = st.selectbox('Selecione o g√™nero', [None] + list(generos_disponiveis), key='genero_selecionado')    

            # Aplicar filtros
            df_filtrado = df.copy()
            if ano_selecionado3:
                df_filtrado = df_filtrado[df_filtrado['ano_letivo'] == ano_selecionado3]
            if pedra_selecionada:
                df_filtrado = df_filtrado[df_filtrado['pedra'] == pedra_selecionada]
            if genero_selecionado:
                df_filtrado = df_filtrado[df_filtrado['genero'] == genero_selecionado]

            # Remover a categoria "nao_informado" antes de calcular os dados
            df_filtrado = df_filtrado[df_filtrado['pedra'] != "nao_informado"]

            # Criar dataframe de contagem
            df_pedra_contagem = df_filtrado.groupby(['ano_letivo', 'pedra']).size().unstack(fill_value=0)

            # Garantir que o total de pedras seja baseado em todos os registros do ano, excluindo "nao_informado"
            df_total_geral = df[df['pedra'] != "nao_informado"].groupby(['ano_letivo', 'pedra']).size().unstack(fill_value=0)
            total_pedra_geral = df_total_geral.sum(axis=1)

            # Calcular percentual com base no total original de todas as pedras, sem "nao_informado"
            df_pedra_percentual = df_pedra_contagem.divide(total_pedra_geral, axis=0) * 100
            df_pedra_percentual = df_pedra_percentual.fillna(0)  # Substituir NaN por 0 se necess√°rio

            # Cores para o gr√°fico
            cores = {
                'Quartzo': 'red',
                'Agata': 'yellow',
                'Ametista': 'lightblue',
                'Topazio': 'lightgreen'
            }   

            # Criar o gr√°fico
            st.subheader("Gr√°fico com a quantidade total de alunos por pedra")
            fig, ax = plt.subplots(figsize=(10, 6))

            # Remover fundo branco
            fig.patch.set_alpha(0)  # Remove fundo do gr√°fico
            ax.set_facecolor("none")  # Remove fundo do eixo
            ax.patch.set_alpha(0)  # Remove fundo interno do gr√°fico

            if ano_selecionado3:
                # Se um √∫nico ano for selecionado, usar gr√°fico de barras
                df_pedra_contagem = df_filtrado['pedra'].value_counts()
                ax.bar(df_pedra_contagem.index, df_pedra_contagem.values, 
                    color=[cores.get(p, 'gray') for p in df_pedra_contagem.index])
                ax.set_ylabel("Total de Pedras", color="white")
                ax.set_xlabel("Pedra", color="white")
                
                for i, v in enumerate(df_pedra_contagem.values):
                    ax.text(i, v + 0.5, str(v), ha='center', color="white")  # Ajuste de cor do texto
            else:
                # Se nenhum ano for selecionado, manter o gr√°fico de linhas
                for pedra in df_pedra_contagem.columns:
                    ax.plot(
                        df_pedra_contagem.index,
                        df_pedra_contagem[pedra],
                        marker='o',
                        label=pedra,
                        color=cores.get(pedra, 'gray')
                    )
                    for i, count in enumerate(df_pedra_contagem[pedra]):
                        ax.text(df_pedra_contagem.index[i], count, str(count), ha='center', va='bottom', color="white")

                ax.set_xlabel("Ano da Pesquisa", color="white")
                ax.legend(title="Pedra")
                leg = ax.legend()
                leg.get_frame().set_facecolor('black')  # Fundo preto
                leg.get_frame().set_edgecolor('white')  # Borda branca
                for text in leg.get_texts():
                    text.set_color("white")  # Texto branco

            # Configura√ß√µes do gr√°fico
            ax.set_title("Alunos separados por PEDRA - Quantidade de alunos", color="white")
            ax.grid(color='gray', linestyle='--', linewidth=0.5)  # Grid mais suave

            ax.tick_params(axis='x', colors='white')  # Cor dos valores no eixo X
            ax.tick_params(axis='y', colors='white')  # Cor dos valores no eixo Y
            
            plt.xticks(rotation=45)
            plt.tight_layout()

            # Exibir no Streamlit
            st.pyplot(fig)

            # Criar o gr√°fico de distribui√ß√£o percentual de alunos por pedra
            st.subheader("Gr√°fico de distribui√ß√£o percentual de alunos por pedra")
            fig, ax = plt.subplots(figsize=(10, 6))

            # Remover fundo branco do gr√°fico
            fig.patch.set_alpha(0)  # Remove o fundo branco do gr√°fico
            ax.set_facecolor("none")  # Remove o fundo dos eixos
            ax.patch.set_alpha(0)  # Remove fundo do plot

            bar_width = 0.15
            y_pos = np.arange(len(df_pedra_percentual.index))

            barras = []
            for i, pedra in enumerate(df_pedra_percentual.columns):
                bars = ax.bar(y_pos + i * bar_width, df_pedra_percentual[pedra], bar_width, color=cores.get(pedra, 'gray'), label=pedra)
                barras.append((bars, df_pedra_percentual[pedra]))

            # Adicionar porcentagens corretamente
            for bars, valores in barras:
                for bar, valor in zip(bars, valores):
                    height = bar.get_height()
                    if height > 0:
                        ax.text(bar.get_x() + bar.get_width()/2., height, f'{valor:.1f}%', ha='center', va='bottom', color='white', fontsize=12)  # Ajuste no tamanho da fonte

            # Ajustes visuais
            ax.set_xticks(y_pos + 1.5 * bar_width)
            ax.set_xticklabels(df_pedra_percentual.index, color='white', fontsize=12)  # Cor e tamanho do eixo X
            ax.set_xlabel("Ano", color='white', fontsize=14)
            ax.set_ylabel("Porcentagem de Alunos", color='white', fontsize=14)
            ax.set_title("Distribui√ß√£o percentual de alunos por pedra", color='white', fontsize=16)
            ax.set_ylim(0, 70)
            ax.grid(color='gray', linestyle='--', linewidth=0.5)  # Grid mais suave

            # Ajustar a legenda para melhorar a visibilidade
            leg = ax.legend()
            leg.get_frame().set_facecolor('black')  # Fundo preto
            leg.get_frame().set_edgecolor('white')  # Borda branca
            for text in leg.get_texts():
                text.set_color("white")  # Texto branco

            plt.tight_layout()
            ax.tick_params(axis='x', colors='white')  # Cor dos valores no eixo X
            ax.tick_params(axis='y', colors='white')  # Cor dos valores no eixo Y
            st.pyplot(fig)


        else:
            st.subheader('Ponto de Virada', divider='orange')

            # texto
            st.markdown('''
                        <p style="font-size: 18px">
                            O XGBoost, ou <i>Extreme Gradient Boosting</i>, √© um algoritmo de aprendizado de m√°quina supervisionado e baseado em √°rvores de decis√£o.
                            O modelo √© uma implementa√ß√£o otimizada do Gradient Boosting e pode ser utilizado para problemas de regress√£o e classifica√ß√£o. O XGBoost √© 
                            amplamente utilizado em competi√ß√µes de ci√™ncia de dados e √© conhecido por sua efici√™ncia e desempenho.
                            <br>
                        </p>
                        ''', unsafe_allow_html=True)
              
    elif menu == "An√°lise Preditiva":
        st.subheader("üîÆ An√°lise Preditiva")
       # st.write("Aqui voc√™ pode acessar modelos preditivos.")

# conclus√£o
elif page == page_3:
    # t√≠tulo
    st.title('Conclus√£o')
    # separador
    st.markdown('<br>', unsafe_allow_html=True)
    # texto
    st.markdown('''
                <p style="font-size: 20px">
                Este projeto teve como objetivo analisar o impacto da ONG Passos M√°gicos no desenvolvimento educacional de crian√ßas e jovens em situa√ß√£o de vulnerabilidade social, 
                utilizando dados do per√≠odo de 2020 a 2024. A combina√ß√£o de ci√™ncia de dados e storytelling foi fundamental para transformar um grande volume de informa√ß√µes em insights acion√°veis.<br>

                Com o uso do Google Colab para explora√ß√£o e tratamento de dados e o Streamlit para a cria√ß√£o de um dashboard interativo, foi poss√≠vel apresentar de forma intuitiva os principais indicadores de performance.<br>

                A an√°lise revelou tend√™ncias significativas que demonstram o impacto positivo da ONG em diversos aspectos-chave:
                - <b>Redu√ß√£o da Defasagem Escolar:</b> Observou-se uma tend√™ncia de diminui√ß√£o da defasagem entre idade e s√©rie, refletindo a efic√°cia das interven√ß√µes pedag√≥gicas da ONG.<br>
                - <b>Aumento no "Ponto de Virada" (PV):</b> Houve um crescimento constante no n√∫mero de alunos que atingiram o PV, indicando o fortalecimento de compet√™ncias acad√™micas e socioemocionais. <br>
                - <b>Evolu√ß√£o por G√™nero e Faixa Et√°ria:</b> A distribui√ß√£o equilibrada entre g√™neros e a melhoria dos resultados em diferentes faixas et√°rias destacam o car√°ter inclusivo das a√ß√µes da ONG. <br>
                - <b>Impacto Longitudinal:</b> A progress√£o consistente no desempenho acad√™mico ao longo dos anos sugere que o impacto da ONG √© cumulativo e sustent√°vel. <br>

                </p>
                ''', unsafe_allow_html=True)
    st.markdown('''
                <p style="font-size: 20px">
                <br>Esses resultados n√£o apenas evidenciam o papel transformador da Passos M√°gicos, mas tamb√©m oferecem subs√≠dios valiosos para a tomada de decis√µes estrat√©gicas. O uso de visualiza√ß√µes interativas facilita o acompanhamento dos indicadores, permitindo que gestores e stakeholders da ONG identifiquem oportunidades de melhoria e ampliem o impacto de suas iniciativas.
                Dessa forma, este trabalho refor√ßa a import√¢ncia da an√°lise de dados no terceiro setor, demonstrando como a tecnologia pode ser uma aliada poderosa na promo√ß√£o da transforma√ß√£o social por meio da educa√ß√£o.
                <br>
                </p>
                ''', unsafe_allow_html=True)    


    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('---')
    
    # pr√≥ximos passos
    st.markdown('''## Principais Insights''')
    
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    Os principais <i>insights</i> e respectivas etapas de melhorias ao projeto,
                    obtidos durante os processos de an√°lise dos dados e constru√ß√£o dos modelos, s√£o retratados a seguir:
                    <br>
                </p>
                ''', unsafe_allow_html=True) 
                
    # melhoria do modelo XGBoost
    st.markdown('''#### Melhoria do Modelo XGBoost''')
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    - <b>Pr√≥ximo passo:</b> utilizar outros modelos para que o XGBoost possa extrapolar previs√µes para 
                      al√©m dos limites dos dados de treinamento.
                <br>
                </p>
                ''', unsafe_allow_html=True)    
    
    create_insight(
                    'Extrapola√ß√£o de Dados na Previs√£o',
                    '''
                        O modelo XGBoost, assim como quaisquer algoritmos baseados em √°rvore, 
                        possui uma desvantagem para tarefas de regress√£o: suas predi√ß√µes respeitar√£o os 
                        limites dos dados utilizados no treinamento. Ou seja, existe dificuldade em <b>extrapolar</b> os 
                        valores m√°ximo e m√≠nimo do intervalo de dados de treinamento. Por isso, se faz interessante 
                        combinar esse modelo a outros, como modelos lineares ou mesmo Redes Neurais Recorrentes, 
                        como <i>Long Short-Term Memory</i> (LSTM).
                    '''
                    )

    st.markdown('<br>', unsafe_allow_html=True)

    # t√≠tulo
    st.markdown('''#### Modelos de *Ensemble Learning*''')
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    O pre√ßo do petr√≥leo √© influenciado por diversos fatores, como oferta e demanda.
                    Al√©m disso, eventos globais, como guerras e desastres naturais, tamb√©m podem afet√°-lo.
                    Logo, essa s√©rie temporal n√£o √© estacion√°ria e possui comportamento n√£o linear. Fatos inesperados, 
                    como os apresentados na se√ß√£o "An√°lise", n√£o s√£o facilmente capturados por um √∫nico modelo.<br><br>
                    - <b>Pr√≥ximo passo:</b> empregar a t√©cnica de <i>ensemble learning</i> para combinar modelos.
                    <br>
                </p>
                ''', unsafe_allow_html=True)
    
    # criar insight
    create_insight('Complexidade do Pre√ßo do Petr√≥leo', 
                   '''
                        Sugere-se a utiliza√ß√£o de <i>ensemble learning</i> para combinar modelos de previs√£o.
                        Esses modelos n√£o precisam se voltar apenas ao pre√ßo do petr√≥leo, mas tamb√©m a outros fatores fundamentais - como produ√ß√£o e mercado.<br>
                        Um modelo de classifica√ß√£o para prever "alta" ou "baixa" do pre√ßo do petr√≥leo pode compor uma <i>feature</i> adicional.<br>
                        Redes Neurais Convolucionais, ou <i>Convolutional Neural Networks</i> (CNN) s√£o eficazes para an√°lise de imagens de sat√©lite e previs√£o de eventos clim√°ticos.
                        CNNs tamb√©m podem ser usadas para previs√£o, a partir de gr√°ficos de <i>candlestick</i>, utilizados por <i>traders</i> para an√°lise t√©cnica.
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('''#### An√°lise de Sentimentos & Mercado Futuro''')

    st.markdown('''
                <p style="font-size: 18px">
                    A an√°lise de sentimentos √© uma t√©cnica de Processamento de Linguagem Natural,
                    ou <i>Natural Language Processing</i> (NLP), que visa identificar e classificar a polaridade 
                    emocional de um texto. Ela utiliza algoritmos e modelos de aprendizado de m√°quina para 
                    atribuir uma pontua√ß√£o de sentimento a cada trecho, indicando se √© positivo, negativo ou neutro.
                    Para melhoria do modelo, um passo importante √© a constru√ß√£o de uma <i>feature</i> que 
                    capture a opini√£o p√∫blica sobre o mercado de petr√≥leo em tempo real, a partir de not√≠cias e redes sociais. 
                    Implementar esses sentimentos no modelo ajuda a incorporar tend√™ncias emergentes e 
                    mudan√ßas de humor que n√£o seriam capturadas apenas por dados hist√≥ricos de pre√ßos.<br><br>
                    - <b>Pr√≥ximo passo:</b> integrar o modelo com outras fontes de dados sobre o mercado de futuro.
                    <br>
                </p>
                ''', unsafe_allow_html=True)

    create_insight('Mercado Futuro & An√°lise de Sentimento', 
                     '''
                        A an√°lise de sentimento tamb√©m contribui para a estabilidade das previs√µes, 
                        conforme medido pelo EV (<i>Error Variance</i>, ou Vari√¢ncia do Erro). A adi√ß√£o de sentimentos extra√≠dos por textos 
                        tende a estabilizar os resultados, reduzindo a variabilidade das previs√µes e tornando-as mais confi√°veis.<br>
                        Al√©m disso, criar features baseadas em contratos futuros de petr√≥leo e ajudar√° a 
                        entender dados de extra√ß√£o e estoque. Tamb√©m, o volume de transa√ß√µes no mercado de futuro √© componente essencial para o c√°lculo 
                        de outros indicadores t√©cnicos, como o <i>Open Interest</i>, que mede o n√∫mero de contratos em aberto.
                      ''')
    
    st.markdown('<br>', unsafe_allow_html=True)    
    
    # t√≠tulo
    st.markdown('''#### Database na Nuvem''')
    # texto
    st.markdown('''
                <p style="font-size: 18px">
                    MLOps √© uma pr√°tica que visa integrar o desenvolvimento de modelos de Machine Learning 
                    com a opera√ß√£o de sistemas. Para essa etapa, √© importante criar um pipeline de dados.<br><br>
                    - <b>Pr√≥ximo passo:</b> <i>deploy</i> da aplica√ß√£o na nuvem, com a Amazon Web Services (AWS).<br>
                        * <b>Amazon S3</b> para armazenamento do modelo<br>
                        * <b>Amazon Redshift</b> para armazenamento dos dados estruturados<br>
                        * <b>Amazon Glue</b> para ETL - <i>Extract Transform Load</i><br>
                        * <b>Amazon SageMaker</b> para treinamento de modelos de Machine Learning<br>
                </p>
                ''', unsafe_allow_html=True)

    # criar insight
    create_insight(
                    'Vantagens de um Database na Nuvem',
                   '''
                        - Escalabilidade: aumenta ou diminui a capacidade de armazenamento conforme a demanda.<br>
                        - Seguran√ßa: os dados s√£o armazenados em servidores seguros e protegidos por criptografia.<br>
                        - Acessibilidade: os dados podem ser acessados de qualquer lugar e a qualquer momento.<br>
                        - Backup: salvamento autom√°tico de dados, que podem ser recuperados em caso de falhas.<br>
                        - Integra√ß√£o: integra√ß√£o com outras ferramentas, como pipelines de dados e APIs.
                        '''
                     )
    
    st.markdown('<br>', unsafe_allow_html=True)
    
    st.markdown('''#### Desenvolver API''')

    st.markdown('''<p style="font-size: 18px">
                API, ou <i>Application Programming Interface</i>, √© um conjunto de regras e protocolos que 
                permitem a comunica√ß√£o entre sistemas.<br><br>
                - <b>Pr√≥ximo passo:</b> criar API para disponibilizar o modelo para usu√°rios e outras aplica√ß√µes.
                <br>
                </p>
                ''', unsafe_allow_html=True)
                        
    # criar insight
    create_insight('API', 
                   '''
                        - Facilita o acesso √†s previs√µes do modelo, permitindo que outras aplica√ß√µes e sistemas consumam os dados.<br>
                        - Pode ser utilizada para criar dashboards, relat√≥rios e aplica√ß√µes web que consomem as previs√µes do modelo.<br>
                        - Permite integra√ß√£o com outros sistemas, como CRMs (<i>Customer Relationship Management</i>) e 
                          ERPs (<i>Enterprise Resource Planning).
                    ''')
    
    st.markdown('<br>', unsafe_allow_html=True)
       
# refer√™ncias        
else:
    st.title('Refer√™ncias')
    st.markdown('<br>', unsafe_allow_html=True)
    # subt√≠tulo
    st.header('Fontes de dados')
    st.markdown('''
                <p style="font-size: 18px">
                    Os dados utilizados neste projeto foram obtidos a partir das fontes listadas abaixo:
                </p>
                ''', unsafe_allow_html=True)
    
    # lista de fontes de dados
    st.markdown('''
                #### [**IPEA**](http://www.ipeadata.gov.br/Default.aspx) - Instituto de Pesquisa Econ√¥mica Aplicada
                Portal de dados econ√¥micos do governo brasileiro, disponibiliza dados de diversos indicadores econ√¥micos, 
                como infla√ß√£o, PIB, taxa de juros, c√¢mbio e pre√ßos de *commodities*. As s√©ries temporais podem ser baixadas 
                em formato `.csv`. O IPEA tamb√©m permite acesso atrav√©s de requisi√ß√µes `HTTP` por meio de API.
                ''')
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                # acessar dados do IPEA
                
                !pip install ipeadatapy                 # instalar biblioteca
                import ipeadatapy as ipea               # importar biblioteca
                
                #ipea.list_series()                     # lista de s√©ries dispon√≠veis
                
                df = ip.timeseries(ipea_table_code)     # obter dados do petr√≥leo Brent
                ''')
    
    st.markdown('''
                #### [**FRED**](https://fred.stlouisfed.org/series/DCOILBRENTEU) - Federal Reserve Economic Data
                Banco de dados econ√¥micos mantido pelo Federal Reserve Bank of St. Louis, nos EUA. 
                Ele cont√©m uma vasta quantidade de dados econ√¥micos, incluindo s√©ries temporais de pre√ßos de *commodities*, 
                como o [**petr√≥leo Brent**](https://fred.stlouisfed.org/series/DCOILBRENTEU).
                Os dados podem ser baixados em formato `.csv`. O FRED disponibiliza tamb√©m permite acesso atrav√©s de requisi√ß√µes `HTTP` por meio de API.
                ''')

    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                    # acessar dados do FRED
                    
                    !pip install pandas_datareader            # instalar biblioteca
                    import pandas_datareader as pdr           # importar biblioteca
                    
                    df = pdr.get_data_fred('DCOILBRENTEU')    # obter dados do petr√≥leo Brent
                ''')

    st.markdown('''
                #### [**Yahoo Finance**](https://finance.yahoo.com/quote/CL=F?p=CL=F) - Yahoo Finance
                Plataforma de not√≠cias e dados financeiros, permite acessar cota√ß√µes de ativos, √≠ndices 
                e pre√ßos de *commodities*. Os dados podem ser baixados em formato `.csv` e tamb√©m acessados por meio de API.
                A biblioteca [`yfinance`](https://pypi.org/project/yfinance/) permite acessar os dados do Yahoo Finance diretamente no Python:
                ''')
    
    with st.expander('üêç Exibir c√≥digo Python'):
        st.code('''
                    # acessar dados do Yahoo Finance
                    
                    !pip install yfinance            # instalar biblioteca
                    import yfinance as yf            # importar biblioteca
                    
                    df = yf.download('BZ=F')         # obter dados do petr√≥leo Brent
                ''')

    st.markdown('<br>', unsafe_allow_html=True)
    # subt√≠tulo para Bibliografia
    st.header('Bibliografia')
    # lista de links
    st.markdown('''
                    - [**OPEC**](https://www.opec.org/opec_web/en/about_us/24.htm) - Organization of the Petroleum Exporting Countries
                    - [**CBI**](https://cbie.com.br/) - Centro Brasileiro de Infraestrutura
                    - [**Investopedia**](https://www.investopedia.com/terms/f/futuresmarket.asp) - Futures Market
                    - [**Wikipedia**](https://en.wikipedia.org/wiki/Brent_Crude) - Brent Crude Oil
                    - [**AWS**](https://aws.amazon.com/pt/) - Amazon Web Services
                    - [**Super Interessante**](https://super.abril.com.br/coluna/deriva-continental/nos-bastidores-da-terra-geologa-explica-a-formacao-do-petroleo) - Nos bastidores da Terra: ge√≥loga explica a forma√ß√£o do petr√≥leo
                    - [**Forecasting Oil Price Using Web-based Sentiment Analysis**](https://www.mdpi.com/1996-1073/12/22/4291) - 
                        Energies (2019), por ZHAO, Lu-Tao; ZENG, Guan-Rong; WANG, Wen-Jing; ZHANG, Zhi-Gang
                    - [**An√°lise pr√°tica de s√©ries temporais: predi√ß√£o com estat√≠stica e aprendizado de m√°quina**](https://www.amazon.com.br/An√°lise-Pr√°tica-S√©ries-Temporais-Estat√≠stica/dp/8550815624) - 
                        Alta Books (2021), por NIELSEN, Aileen
                ''')
    
    
# footer
st.markdown('<br>', unsafe_allow_html=True)

st.markdown('---')

# texto -> Agradecimentos
st.markdown('''<p style="font-size: 18px; text-align: center;">
            Obrigado por acompanhar este projeto! üöÄ
            <br>
            </p>''', unsafe_allow_html=True)

# linkedin = 'https://www.linkedin.com/in/viniplima/'
# github = 'https://github.com/euvina/'

# mail = 'pradolimavinicius@gmail.com'
# subject = 'Contato via Streamlit - Projeto Previs√£o de Pre√ßo do Petr√≥leo Brent'

# # √°rea de contato
# st.markdown('''<p style="font-size: 18px; text-align: center;">
#             üìß Entre em contato:<br>
#             <a href="mailto:{}?subject={}">
#             <img src="https://img.shields.io/badge/-Gmail-D14836?style=for-the-badge&logo=Gmail&logoColor=white" alt="Gmail">
#             </a>
#             <a href="{}">
#             <img src="https://img.shields.io/badge/-GitHub-181717?style=for-the-badge&logo=GitHub&logoColor=white" alt="GitHub">
#             </a>
#             <a href="{}">
#             <img src="https://img.shields.io/badge/-LinkedIn-0077B5?style=for-the-badge&logo=LinkedIn&logoColor=white" alt="LinkedIn">
#             </a>
#             </p>'''.format(mail, subject, linkedin, github), unsafe_allow_html=True)
